// Code generated by goyacc -o ./goyaccidl.y.go -p YaccIdl ./goyaccidl.y. DO NOT EDIT.

//line ./goyaccidl.y:2
package yaccidl

import __yyfmt__ "fmt"

//line ./goyaccidl.y:2

//line ./goyaccidl.y:116
type YaccIdlSymType struct {
	yys                  int
	Node                 IYaccNode
	Value                IValue
	CharValue            rune
	BoolValue            bool
	InterfaceKind        IInterfaceKind
	InterfaceHeader      IInterfaceHeader
	ParamDirection       ParamDirection
	ValueInheritanceSpec IValueInheritanceSpec
	ValueHeader          IValueHeader
	AttrDeclarator       IAttrDeclarator
	ElementSpec          IElementSpec
	ConstValue           IBaseConstantValue
	UnionBody            IUnionBody
}

const None = 57346
const SingleComment = 57347
const MultiLineComment = 57348
const WhiteSpace = 57349
const HashLoadDefinition = 57350
const HashPragma = 57351
const HashDefine = 57352
const HashUnDefine = 57353
const Hashifdef = 57354
const Hashifndef = 57355
const Hashendif = 57356
const Hashelse = 57357
const HashInclude = 57358
const ScopeOp = 57359
const ShlOp = 57360
const ShrOp = 57361
const Annotation = 57362
const String_literal = 57363
const Identifier = 57364
const Integer_literal = 57365
const Floating_pt_literal = 57366
const Fixed_pt_literal = 57367
const Character_literal = 57368
const Wide_Character_literal = 57369
const Wide_String_literal = 57370
const Hex_literal = 57371
const ErrorFileNotFound = 57372
const RWabstract = 57373
const RWany = 57374
const RWalias = 57375
const RWattribute = 57376
const RWbitfield = 57377
const RWbitmask = 57378
const RWbitset = 57379
const RWboolean = 57380
const RWcase = 57381
const RWchar = 57382
const RWcomponent = 57383
const RWconnector = 57384
const RWconst = 57385
const RWconsumes = 57386
const RWcontext = 57387
const RWcustom = 57388
const RWdefault = 57389
const RWdouble = 57390
const RWexception = 57391
const RWemits = 57392
const RWenum = 57393
const RWeventtype = 57394
const RWfactory = 57395
const RWFALSE = 57396
const RWfinder = 57397
const RWfixed = 57398
const RWfloat = 57399
const RWgetraises = 57400
const RWhome = 57401
const RWimport = 57402
const RWin = 57403
const RWinout = 57404
const RWinterface = 57405
const RWlocal = 57406
const RWlong = 57407
const RWmanages = 57408
const RWmap = 57409
const RWmirrorport = 57410
const RWmodule = 57411
const RWmultiple = 57412
const RWnative = 57413
const RWObject = 57414
const RWoctet = 57415
const RWoneway = 57416
const RWout = 57417
const RWprimarykey = 57418
const RWprivate = 57419
const RWport = 57420
const RWporttype = 57421
const RWprovides = 57422
const RWpublic = 57423
const RWpublishes = 57424
const RWraises = 57425
const RWreadonly = 57426
const RWsetraises = 57427
const RWsequence = 57428
const RWshort = 57429
const RWstring = 57430
const RWstruct = 57431
const RWsupports = 57432
const RWswitch = 57433
const RWTRUE = 57434
const RWtruncatable = 57435
const RWtypedef = 57436
const RWtypeid = 57437
const RWtypename = 57438
const RWtypeprefix = 57439
const RWunsigned = 57440
const RWunion = 57441
const RWuses = 57442
const RWValueBase = 57443
const RWvaluetype = 57444
const RWvoid = 57445
const RWwchar = 57446
const RWwstring = 57447
const RWint8 = 57448
const RWuint8 = 57449
const RWint16 = 57450
const RWint32 = 57451
const RWint64 = 57452
const RWuint16 = 57453
const RWuint32 = 57454
const RWuint64 = 57455

var YaccIdlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"None",
	"SingleComment",
	"MultiLineComment",
	"WhiteSpace",
	"HashLoadDefinition",
	"HashPragma",
	"HashDefine",
	"HashUnDefine",
	"Hashifdef",
	"Hashifndef",
	"Hashendif",
	"Hashelse",
	"HashInclude",
	"ScopeOp",
	"ShlOp",
	"ShrOp",
	"Annotation",
	"String_literal",
	"Identifier",
	"Integer_literal",
	"Floating_pt_literal",
	"Fixed_pt_literal",
	"Character_literal",
	"Wide_Character_literal",
	"Wide_String_literal",
	"Hex_literal",
	"ErrorFileNotFound",
	"RWabstract",
	"RWany",
	"RWalias",
	"RWattribute",
	"RWbitfield",
	"RWbitmask",
	"RWbitset",
	"RWboolean",
	"RWcase",
	"RWchar",
	"RWcomponent",
	"RWconnector",
	"RWconst",
	"RWconsumes",
	"RWcontext",
	"RWcustom",
	"RWdefault",
	"RWdouble",
	"RWexception",
	"RWemits",
	"RWenum",
	"RWeventtype",
	"RWfactory",
	"RWFALSE",
	"RWfinder",
	"RWfixed",
	"RWfloat",
	"RWgetraises",
	"RWhome",
	"RWimport",
	"RWin",
	"RWinout",
	"RWinterface",
	"RWlocal",
	"RWlong",
	"RWmanages",
	"RWmap",
	"RWmirrorport",
	"RWmodule",
	"RWmultiple",
	"RWnative",
	"RWObject",
	"RWoctet",
	"RWoneway",
	"RWout",
	"RWprimarykey",
	"RWprivate",
	"RWport",
	"RWporttype",
	"RWprovides",
	"RWpublic",
	"RWpublishes",
	"RWraises",
	"RWreadonly",
	"RWsetraises",
	"RWsequence",
	"RWshort",
	"RWstring",
	"RWstruct",
	"RWsupports",
	"RWswitch",
	"RWTRUE",
	"RWtruncatable",
	"RWtypedef",
	"RWtypeid",
	"RWtypename",
	"RWtypeprefix",
	"RWunsigned",
	"RWunion",
	"RWuses",
	"RWValueBase",
	"RWvaluetype",
	"RWvoid",
	"RWwchar",
	"RWwstring",
	"RWint8",
	"RWuint8",
	"RWint16",
	"RWint32",
	"RWint64",
	"RWuint16",
	"RWuint32",
	"RWuint64",
	"';'",
	"'{'",
	"'}'",
	"','",
	"'='",
	"'|'",
	"'^'",
	"'&'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'~'",
	"'('",
	"')'",
	"'<'",
	"'>'",
	"':'",
	"'['",
	"']'",
	"'@'",
}
var YaccIdlStatenames = [...]string{}

const YaccIdlEofCode = 1
const YaccIdlErrCode = 2
const YaccIdlInitialStackSize = 16

//line ./goyaccidl.y:4512

//line yacctab:1
var YaccIdlExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	114, 372,
	-2, 1,
	-1, 179,
	115, 200,
	-2, 199,
	-1, 181,
	115, 257,
	-2, 289,
	-1, 183,
	115, 315,
	-2, 313,
	-1, 189,
	115, 261,
	-2, 376,
	-1, 414,
	117, 269,
	-2, 263,
}

const YaccIdlPrivate = 57344

const YaccIdlLast = 1839

var YaccIdlAct = [...]int{

	157, 458, 691, 491, 492, 693, 646, 439, 581, 644,
	576, 362, 363, 586, 528, 405, 650, 367, 597, 456,
	257, 414, 97, 109, 406, 630, 579, 502, 340, 341,
	333, 158, 343, 142, 143, 145, 339, 427, 369, 415,
	317, 489, 493, 342, 398, 271, 338, 248, 160, 345,
	159, 164, 99, 368, 284, 150, 229, 12, 168, 12,
	167, 166, 238, 279, 165, 278, 223, 293, 163, 228,
	11, 108, 11, 107, 101, 277, 264, 227, 10, 376,
	10, 106, 3, 105, 104, 78, 262, 103, 601, 273,
	218, 100, 226, 7, 399, 7, 296, 259, 98, 224,
	6, 2, 6, 122, 247, 225, 5, 273, 5, 310,
	295, 714, 709, 175, 447, 702, 588, 590, 656, 118,
	295, 116, 506, 305, 261, 203, 311, 700, 655, 113,
	589, 274, 657, 654, 486, 485, 507, 173, 112, 470,
	466, 201, 253, 255, 647, 527, 114, 582, 174, 274,
	582, 527, 294, 176, 119, 577, 202, 710, 249, 249,
	249, 628, 299, 699, 712, 254, 210, 172, 131, 120,
	209, 273, 660, 629, 640, 636, 632, 625, 568, 136,
	669, 651, 177, 474, 583, 117, 121, 135, 140, 132,
	133, 134, 137, 138, 139, 591, 250, 250, 250, 479,
	480, 481, 513, 472, 497, 337, 496, 495, 494, 613,
	364, 364, 679, 274, 515, 608, 464, 335, 578, 477,
	478, 473, 365, 573, 361, 540, 541, 510, 681, 600,
	641, 637, 633, 570, 329, 302, 516, 527, 204, 509,
	508, 516, 471, 467, 272, 219, 396, 717, 203, 280,
	703, 667, 298, 665, 663, 364, 620, 543, 12, 251,
	252, 203, 407, 542, 535, 487, 401, 334, 446, 418,
	408, 11, 300, 403, 407, 417, 370, 395, 265, 10,
	394, 371, 631, 265, 666, 554, 428, 428, 432, 433,
	434, 435, 436, 534, 7, 438, 440, 441, 413, 631,
	445, 6, 377, 313, 393, 308, 454, 5, 372, 377,
	386, 307, 463, 686, 701, 219, 400, 306, 402, 303,
	213, 185, 182, 180, 430, 178, 149, 148, 147, 109,
	658, 410, 411, 685, 607, 606, 569, 539, 538, 537,
	409, 426, 425, 280, 424, 364, 715, 448, 423, 422,
	421, 364, 419, 420, 387, 460, 404, 384, 453, 545,
	437, 265, 364, 483, 461, 443, 383, 452, 382, 451,
	12, 385, 381, 370, 484, 380, 379, 108, 375, 107,
	101, 469, 378, 11, 374, 373, 95, 106, 94, 105,
	104, 10, 93, 103, 482, 92, 78, 100, 501, 91,
	364, 249, 90, 89, 88, 87, 7, 488, 86, 85,
	84, 505, 83, 6, 82, 81, 80, 417, 79, 5,
	391, 198, 98, 442, 312, 514, 295, 122, 212, 599,
	598, 370, 428, 631, 203, 188, 98, 531, 518, 250,
	444, 122, 504, 530, 503, 532, 186, 295, 588, 590,
	211, 196, 511, 512, 290, 499, 517, 599, 208, 366,
	647, 582, 589, 577, 291, 550, 285, 664, 533, 521,
	207, 197, 337, 364, 364, 364, 364, 364, 364, 364,
	364, 364, 364, 151, 335, 187, 286, 208, 694, 431,
	392, 429, 243, 529, 242, 688, 695, 23, 416, 329,
	488, 457, 557, 560, 593, 561, 562, 364, 555, 364,
	559, 407, 565, 566, 567, 407, 407, 417, 602, 558,
	603, 563, 564, 552, 370, 549, 551, 594, 615, 548,
	616, 611, 618, 547, 334, 605, 98, 614, 612, 610,
	609, 122, 328, 556, 154, 617, 153, 619, 325, 155,
	326, 322, 98, 98, 203, 621, 146, 122, 122, 526,
	98, 622, 320, 624, 357, 122, 351, 352, 353, 354,
	355, 358, 604, 98, 627, 520, 519, 357, 122, 351,
	352, 353, 354, 355, 358, 327, 498, 203, 323, 203,
	468, 429, 525, 412, 524, 319, 390, 360, 324, 389,
	388, 321, 203, 330, 635, 653, 203, 523, 370, 639,
	360, 522, 98, 309, 407, 649, 652, 96, 301, 648,
	203, 203, 206, 205, 215, 214, 623, 200, 199, 661,
	195, 194, 193, 662, 659, 359, 192, 191, 190, 672,
	634, 189, 184, 675, 671, 638, 674, 678, 359, 183,
	642, 181, 440, 680, 179, 677, 141, 364, 670, 683,
	668, 572, 673, 476, 475, 203, 676, 244, 684, 449,
	440, 350, 596, 705, 689, 690, 152, 696, 347, 346,
	44, 459, 245, 348, 350, 246, 687, 698, 697, 332,
	331, 626, 241, 704, 318, 364, 316, 315, 706, 304,
	43, 536, 289, 711, 450, 41, 42, 708, 287, 38,
	682, 713, 39, 40, 98, 221, 283, 716, 357, 122,
	351, 352, 353, 354, 355, 358, 290, 282, 281, 175,
	575, 574, 220, 217, 216, 118, 291, 116, 285, 297,
	288, 37, 240, 276, 275, 113, 292, 56, 31, 162,
	161, 360, 571, 173, 112, 707, 645, 643, 286, 144,
	580, 584, 114, 231, 174, 230, 222, 171, 170, 176,
	119, 169, 490, 236, 59, 585, 66, 49, 48, 68,
	67, 24, 267, 172, 131, 120, 266, 263, 29, 359,
	235, 156, 25, 47, 46, 136, 234, 256, 177, 258,
	27, 117, 121, 135, 140, 132, 133, 134, 137, 138,
	139, 98, 65, 102, 130, 129, 122, 128, 127, 347,
	346, 126, 125, 124, 348, 350, 175, 123, 241, 111,
	71, 70, 118, 110, 116, 20, 19, 22, 18, 17,
	16, 15, 113, 26, 14, 69, 13, 270, 45, 260,
	173, 112, 455, 9, 34, 8, 692, 595, 546, 114,
	4, 174, 1, 35, 36, 50, 176, 119, 237, 344,
	336, 269, 349, 356, 55, 268, 53, 28, 240, 52,
	172, 131, 120, 76, 587, 30, 54, 500, 51, 32,
	592, 33, 136, 77, 397, 177, 0, 239, 117, 121,
	135, 140, 132, 133, 134, 137, 138, 139, 98, 0,
	0, 0, 0, 122, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 175, 0, 241, 0, 71, 70, 118,
	0, 116, 0, 0, 22, 0, 0, 0, 0, 113,
	26, 0, 69, 0, 232, 0, 233, 173, 112, 0,
	0, 34, 0, 0, 0, 0, 114, 0, 174, 0,
	0, 0, 50, 176, 119, 237, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 240, 0, 172, 131, 120,
	76, 0, 0, 0, 0, 51, 32, 0, 33, 136,
	77, 0, 177, 0, 239, 117, 121, 135, 140, 132,
	133, 134, 137, 138, 139, 98, 0, 0, 0, 0,
	122, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	175, 0, 241, 0, 71, 70, 118, 0, 116, 0,
	0, 22, 0, 0, 0, 0, 113, 26, 0, 69,
	0, 0, 0, 0, 173, 112, 0, 0, 34, 0,
	0, 0, 0, 114, 0, 174, 0, 0, 0, 50,
	176, 119, 237, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 240, 0, 172, 131, 120, 76, 0, 0,
	0, 0, 51, 32, 0, 33, 136, 77, 0, 177,
	0, 239, 117, 121, 135, 140, 132, 133, 134, 137,
	138, 139, 98, 0, 0, 0, 0, 122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 175, 0, 0,
	0, 71, 70, 118, 0, 116, 0, 0, 0, 0,
	0, 0, 0, 113, 0, 0, 69, 0, 0, 0,
	0, 173, 112, 0, 0, 0, 0, 0, 0, 0,
	114, 0, 174, 0, 0, 0, 0, 176, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 172, 131, 120, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 77, 0, 177, 0, 0, 117,
	121, 135, 140, 132, 133, 134, 137, 138, 139, 98,
	0, 0, 0, 0, 122, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 175, 0, 0, 0, 0, 0,
	118, 0, 116, 0, 0, 0, 0, 0, 0, 0,
	113, 0, 0, 0, 0, 0, 0, 0, 173, 112,
	0, 0, 0, 0, 0, 0, 0, 114, 0, 174,
	0, 0, 0, 0, 176, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 172, 131,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	136, 0, 0, 177, 0, 0, 117, 121, 135, 140,
	132, 133, 134, 137, 138, 139, 98, 0, 544, 0,
	0, 122, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 175, 0, 0, 0, 0, 0, 118, 0, 116,
	0, 0, 0, 0, 0, 0, 0, 113, 0, 0,
	0, 0, 0, 0, 0, 173, 112, 0, 0, 0,
	0, 0, 0, 0, 114, 0, 174, 0, 0, 0,
	0, 176, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 172, 131, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 136, 0, 0,
	177, 0, 0, 117, 121, 135, 140, 132, 133, 134,
	137, 138, 139, 98, 0, 462, 0, 0, 122, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 175, 0,
	0, 0, 0, 0, 118, 694, 116, 0, 0, 0,
	0, 0, 0, 695, 113, 0, 0, 0, 0, 0,
	0, 0, 173, 112, 0, 0, 0, 0, 0, 0,
	0, 114, 0, 174, 0, 0, 0, 0, 176, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 172, 131, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 136, 0, 0, 177, 0, 64,
	117, 121, 135, 140, 132, 133, 134, 137, 138, 139,
	60, 0, 0, 0, 0, 71, 70, 0, 0, 0,
	57, 63, 22, 0, 0, 75, 0, 0, 26, 0,
	69, 61, 0, 0, 0, 0, 0, 0, 58, 34,
	64, 0, 72, 73, 0, 0, 0, 0, 21, 0,
	50, 60, 0, 0, 0, 0, 71, 70, 62, 0,
	0, 57, 63, 22, 0, 0, 75, 0, 76, 26,
	0, 69, 61, 51, 32, 0, 33, 0, 77, 58,
	34, 74, 0, 72, 73, 98, 0, 0, 0, 21,
	122, 50, 0, 0, 0, 465, 0, 0, 0, 62,
	175, 0, 0, 0, 0, 0, 118, 0, 116, 76,
	0, 0, 0, 0, 51, 32, 113, 33, 0, 77,
	0, 0, 74, 0, 173, 112, 0, 0, 0, 0,
	0, 0, 0, 114, 0, 174, 314, 0, 0, 0,
	176, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 172, 131, 120, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 136, 122, 0, 177,
	0, 0, 117, 121, 135, 140, 132, 133, 134, 137,
	138, 139, 0, 118, 0, 116, 0, 0, 0, 0,
	98, 0, 0, 113, 0, 122, 0, 0, 0, 0,
	0, 115, 112, 0, 0, 0, 0, 0, 0, 0,
	114, 118, 0, 116, 0, 0, 0, 0, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 131, 120, 0, 0, 0, 0, 553, 0,
	0, 0, 0, 136, 0, 0, 119, 0, 0, 117,
	121, 135, 140, 132, 133, 134, 137, 138, 139, 0,
	131, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 136, 0, 0, 0, 0, 64, 117, 0, 135,
	140, 132, 133, 134, 137, 138, 139, 60, 0, 0,
	0, 0, 71, 70, 0, 0, 0, 57, 63, 22,
	0, 0, 75, 0, 0, 26, 0, 69, 61, 0,
	0, 0, 0, 0, 0, 58, 34, 0, 0, 72,
	73, 0, 0, 0, 0, 21, 0, 50, 0, 0,
	0, 0, 0, 0, 0, 62, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 76, 0, 0, 0, 0,
	51, 32, 0, 33, 0, 77, 0, 0, 74,
}
var YaccIdlPact = [...]int{

	1736, -1000, 1736, -1000, 304, 302, 301, 300, 298, 296,
	295, 294, 291, 290, 289, 288, 285, 281, 278, 274,
	272, 595, 1625, -1000, -1000, -1000, 634, -1000, -1000, -1000,
	-1000, -1000, 536, 536, 535, -1000, -1000, 213, -1000, -1000,
	-1000, -1000, -1000, 212, 211, -1000, -1000, -1000, -1000, -1000,
	461, 1085, 210, 632, 208, 629, 207, 627, 620, 206,
	383, 619, 616, 615, 614, -1000, -1000, -1000, -1000, 610,
	609, 608, -1000, 388, -1000, 369, 606, 605, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 26, 108, 601, 600,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 648,
	-1000, -1000, -1000, -1000, 422, -1000, -1000, -1000, -1000, -1000,
	40, 36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 363, -1000, -1000, -1000,
	-1000, 205, 604, 603, -1000, 648, -1000, 891, -1000, -1000,
	-1000, -1000, -1000, 461, 461, 461, -1000, 648, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 12, 35, 13, -1000, -1000, -1000, 988, -8,
	794, 81, 658, 20, 30, 794, -1000, -1000, 596, 17,
	204, -9, -1000, 202, 196, 190, -1000, -1000, 591, -6,
	333, 1500, 499, 581, 697, -1000, 106, -1000, -1000, 556,
	556, -1000, 394, 1548, -1000, -1000, 165, 891, -1000, -1000,
	271, 270, 264, 268, 262, 261, 258, 254, 252, 243,
	257, 240, 578, 577, 574, -1000, -1000, 317, -1000, -1000,
	456, 1548, -1000, -1000, 164, 161, -1000, 129, -1000, -39,
	-1000, 129, 129, 1548, 556, 1548, 157, -1000, 988, -1000,
	-1000, 536, 154, 794, -1000, -1000, -1000, -1000, 1548, 1548,
	571, -1000, -1000, 536, 405, 153, 658, -1000, 239, 236,
	235, 234, 230, 228, 227, 519, 419, 536, 536, 536,
	536, 536, 336, -1000, 536, 536, 536, 357, 374, 536,
	152, -1, -1000, 386, -1000, 536, 479, -1000, -1000, 17,
	1279, 536, 88, 1459, -1000, 9, 126, -1000, 568, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 12, 1625, -1000,
	-1000, 8, 125, -1000, -1000, -1000, 84, 648, 101, 62,
	645, 97, 75, -1000, 543, -1000, -1000, -1000, -1000, -1000,
	556, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 556, 4, -1000, 648, 3, -1000, 149, 1548, -1000,
	461, -1000, -1000, -1000, -1000, -1000, -1000, 80, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 79, 78,
	76, 564, 1548, 461, -1000, -1000, 461, -39, -1000, 556,
	5, 123, 122, -1000, -1000, 110, -1000, 648, -1000, -1000,
	461, 461, 74, -1000, 335, 124, 536, 648, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 554, 648, -1000,
	553, 519, 589, 585, 572, 570, 537, -1000, 648, 120,
	648, 417, 536, 371, 536, 648, -1000, 988, 178, 148,
	-1000, 225, 224, 223, 648, 109, -1000, -1000, 147, 141,
	-1000, 1182, -1000, 244, 1653, -1000, 170, 499, -1000, -1000,
	521, 697, 556, 556, 556, 556, 556, 556, 556, 556,
	556, 556, -1000, 49, -1000, -1000, -1000, -1000, -1000, 222,
	116, -1000, -39, -1000, 640, 94, 89, 55, 67, 461,
	-1000, 372, 112, -1000, -1000, -46, 556, -1000, 556, 1548,
	536, 221, 220, 86, 536, 536, 536, 119, -1000, -1000,
	-1000, 515, -1000, -1000, -1000, -1000, -1000, 536, -1000, 536,
	417, 536, 417, 140, 988, -1000, -1000, -1000, -1000, -1000,
	-1000, 479, -1000, -1000, -1000, 1548, 48, -1000, -1000, -1000,
	648, -1000, -1000, 393, -1000, -1000, -1000, -1000, 101, 62,
	645, 97, 97, 75, 75, -1000, -1000, -1000, -1000, -1000,
	461, 44, -1000, 350, 47, 115, -1000, 1548, 350, 46,
	114, -1000, 1548, 350, 45, 113, -1000, 1548, -1000, -1000,
	-1000, 399, -1000, 350, 112, -1000, 344, -1000, 53, 53,
	461, -1000, 2, -3, 1, -1000, -1000, -1000, 216, 43,
	-1000, 110, -1000, 536, -1000, 648, 648, -1000, 417, -1000,
	-1000, 138, -1000, 430, 137, 169, 135, -1000, 639, -1000,
	-1000, 52, 350, 402, 461, -1000, 350, 400, 461, -1000,
	350, 387, 461, 83, -1000, 111, -1000, 1548, -1000, -1000,
	-1000, 536, -1000, -1000, -1000, -1000, 556, -1000, -1000, 219,
	199, 110, -1000, -1000, 473, -1000, 449, -1000, -1000, 536,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 399, 461, 34, -4, -1000, -1000, 200, -17, 134,
	449, -1000, 1376, -1000, 556, -20, 28, -1000, -1000, -1000,
	-1000, -1000, 536, -1000, -1000, 50, -1000, 461, -21, -1000,
	-1000, 231, -1000, -1000, -1000, -1000, 131, -1000,
}
var YaccIdlPgo = [...]int{

	0, 44, 894, 890, 887, 886, 885, 884, 879, 877,
	876, 874, 873, 49, 872, 11, 12, 870, 46, 36,
	28, 29, 43, 32, 869, 101, 15, 24, 20, 864,
	863, 862, 4, 82, 860, 39, 21, 105, 27, 99,
	858, 92, 857, 5, 856, 855, 853, 852, 849, 77,
	848, 497, 69, 56, 846, 844, 841, 840, 839, 838,
	836, 835, 0, 7, 52, 68, 833, 829, 827, 823,
	822, 821, 818, 817, 815, 814, 64, 61, 60, 58,
	51, 813, 50, 48, 53, 812, 800, 799, 797, 796,
	25, 104, 17, 794, 793, 38, 62, 792, 791, 790,
	41, 788, 787, 76, 786, 782, 494, 781, 780, 779,
	492, 778, 777, 776, 31, 775, 774, 773, 47, 772,
	3, 42, 771, 768, 767, 19, 766, 97, 66, 765,
	763, 761, 26, 760, 8, 759, 757, 9, 756, 6,
	752, 79, 750, 749, 748, 747, 746, 744, 10, 67,
	743, 75, 65, 37, 63, 741, 739, 734, 733, 90,
	732, 731, 730, 86, 728, 727, 716, 14, 715, 713,
	712, 709, 706, 705, 704, 701, 701, 54, 700, 699,
	699, 697, 696, 40, 694, 691, 691, 690, 689, 30,
	689, 1, 685, 682, 682, 682, 682, 682, 682, 682,
	682, 682, 681, 681, 680, 680, 13, 676, 45, 2,
	675, 674, 673, 672, 18, 16, 669, 667, 667, 667,
	667, 626, 626, 626,
}
var YaccIdlR1 = [...]int{

	0, 31, 25, 25, 25, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
	33, 33, 34, 34, 63, 63, 62, 62, 62, 37,
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	16, 17, 17, 18, 18, 19, 19, 20, 20, 20,
	21, 21, 21, 22, 22, 22, 22, 23, 23, 24,
	24, 24, 13, 13, 13, 14, 14, 14, 14, 14,
	14, 14, 14, 12, 12, 15, 39, 39, 39, 96,
	96, 106, 106, 98, 98, 98, 98, 98, 98, 98,
	98, 98, 80, 80, 80, 65, 65, 66, 66, 66,
	66, 68, 68, 69, 69, 70, 70, 67, 67, 67,
	67, 72, 72, 73, 73, 74, 74, 76, 77, 78,
	79, 110, 110, 110, 110, 110, 114, 114, 82, 82,
	83, 83, 142, 81, 51, 51, 51, 51, 51, 50,
	50, 85, 85, 85, 84, 84, 92, 92, 95, 113,
	93, 93, 108, 40, 40, 40, 40, 40, 40, 211,
	210, 210, 209, 44, 44, 43, 43, 212, 109, 94,
	47, 47, 125, 121, 2, 2, 1, 107, 38, 38,
	32, 97, 207, 207, 207, 91, 91, 118, 118, 100,
	119, 119, 120, 120, 122, 41, 45, 45, 86, 9,
	8, 8, 10, 10, 10, 48, 26, 26, 27, 88,
	28, 28, 87, 87, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 127, 126, 126, 126, 126, 89, 89,
	131, 115, 115, 206, 7, 7, 7, 90, 128, 128,
	99, 3, 3, 117, 4, 4, 42, 42, 42, 213,
	214, 215, 46, 46, 46, 101, 5, 5, 11, 11,
	11, 208, 208, 208, 208, 208, 208, 208, 208, 35,
	35, 36, 102, 102, 163, 163, 103, 103, 103, 104,
	104, 105, 105, 105, 105, 132, 133, 133, 134, 6,
	49, 52, 53, 135, 135, 123, 129, 136, 136, 136,
	137, 138, 138, 139, 130, 130, 140, 140, 141, 144,
	124, 54, 54, 29, 30, 145, 145, 145, 145, 146,
	147, 150, 150, 150, 151, 151, 151, 151, 151, 151,
	151, 152, 153, 153, 154, 154, 55, 155, 155, 155,
	155, 155, 155, 155, 155, 155, 155, 156, 157, 158,
	158, 158, 159, 159, 159, 160, 160, 160, 160, 161,
	162, 162, 148, 149, 164, 165, 166, 167, 168, 168,
	168, 168, 56, 56, 56, 56, 169, 169, 170, 170,
	171, 116, 116, 116, 116, 57, 57, 172, 173, 216,
	174, 174, 174, 175, 176, 176, 177, 177, 58, 178,
	178, 179, 217, 180, 180, 59, 181, 182, 182, 183,
	184, 184, 184, 184, 184, 184, 184, 184, 184, 184,
	184, 185, 186, 186, 60, 187, 188, 188, 189, 189,
	218, 220, 220, 219, 143, 143, 221, 111, 190, 191,
	199, 200, 200, 201, 201, 201, 112, 202, 203, 71,
	75, 61, 204, 205, 205, 205, 205, 192, 193, 194,
	194, 195, 195, 195, 196, 197, 197, 198, 198, 222,
	222, 223,
}
var YaccIdlR2 = [...]int{

	0, 1, 0, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 5, 4, 1, 3, 1, 2, 3, 5,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 1, 3, 1, 3, 1, 3, 3,
	1, 3, 3, 1, 3, 3, 3, 2, 1, 1,
	1, 1, 1, 1, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 2, 1, 2, 1, 3, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 6, 4, 4, 1,
	4, 1, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 5, 7, 4, 1, 2, 0, 1, 3, 2,
	1, 1, 9, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 3, 1, 2, 3, 2, 2, 2, 5,
	1, 3, 1, 2, 1, 2, 3, 2, 1, 3,
	1, 2, 2, 2, 2, 1, 3, 1, 1, 1,
	1, 3, 1, 1, 1, 5, 1, 1, 4, 2,
	2, 3, 1, 2, 2, 2, 1, 3, 1, 1,
	0, 1, 2, 1, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 4, 5, 5, 6, 1, 1,
	1, 1, 3, 3, 1, 1, 1, 4, 1, 1,
	4, 2, 1, 3, 2, 1, 2, 1, 1, 2,
	2, 3, 1, 1, 1, 4, 3, 2, 1, 2,
	2, 0, 2, 2, 4, 2, 4, 3, 5, 1,
	3, 1, 1, 2, 0, 1, 1, 1, 1, 4,
	4, 5, 6, 6, 7, 1, 1, 3, 3, 2,
	3, 3, 2, 1, 1, 1, 6, 0, 1, 2,
	1, 1, 3, 3, 2, 2, 1, 3, 4, 3,
	1, 1, 1, 2, 4, 2, 3, 3, 4, 2,
	1, 0, 1, 2, 2, 2, 2, 2, 2, 2,
	2, 3, 1, 1, 3, 4, 4, 4, 5, 4,
	5, 5, 6, 5, 6, 6, 7, 2, 1, 0,
	1, 2, 1, 2, 2, 4, 5, 5, 6, 1,
	1, 3, 3, 2, 3, 3, 3, 2, 4, 5,
	5, 6, 0, 1, 1, 1, 2, 3, 6, 7,
	4, 2, 3, 3, 4, 1, 1, 2, 5, 2,
	2, 2, 2, 0, 1, 2, 3, 3, 4, 2,
	3, 2, 0, 1, 2, 8, 1, 1, 3, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 0, 1, 2, 6, 1, 1, 3, 1, 1,
	6, 1, 3, 1, 8, 6, 0, 13, 0, 0,
	3, 4, 6, 1, 1, 1, 5, 0, 1, 1,
	1, 4, 2, 1, 2, 2, 2, 0, 1, 3,
	5, 1, 1, 1, 1, 2, 5, 1, 1, 1,
	3, 3,
}
var YaccIdlChk = [...]int{

	-1000, -31, -25, -33, -34, -37, -39, -41, -45, -46,
	-49, -52, -53, -54, -55, -56, -57, -58, -59, -60,
	-61, 69, 43, -51, -107, -97, 49, -86, -9, -101,
	-6, -144, 95, 97, 60, -30, -29, -155, -171, -170,
	-169, -173, -172, -178, -204, -50, -93, -94, -111, -112,
	71, 94, -8, -10, -5, -11, -145, 41, 59, -116,
	31, 52, 79, 42, 20, -85, -113, -108, -109, 51,
	37, 36, 63, 64, 102, 46, 89, 99, -33, 114,
	114, 114, 114, 114, 114, 114, 114, 114, 114, 114,
	114, 114, 114, 114, 114, 114, 22, -62, 17, -64,
	-65, -80, -81, -76, -77, -78, -79, -82, -83, -62,
	-66, -67, 57, 48, 65, 56, 40, 104, 38, 73,
	88, 105, 22, -68, -69, -70, -71, -72, -73, -74,
	-75, 87, 108, 109, 110, 106, 98, 111, 112, 113,
	107, 22, -62, -62, -135, -62, 21, 115, 115, 115,
	-32, 22, -207, -106, -110, -51, -98, -62, -114, -82,
	-83, -142, -143, -65, -80, -76, -77, -78, -79, -122,
	-123, -124, 86, 56, 67, 32, 72, 101, 115, 22,
	115, 22, 115, 22, 22, 115, 63, 102, 52, 22,
	22, 22, 22, 22, 22, 22, 63, 102, 52, 22,
	22, 115, 130, 17, 130, 22, 22, 48, 65, 130,
	130, 87, 65, 115, 21, 21, -157, -158, -159, -127,
	-160, -168, -126, -128, -39, -37, -41, -49, -52, -53,
	-129, -130, 53, 55, -89, -99, -117, 74, -96, 103,
	84, 34, -106, -110, -217, -193, -192, -91, -118, -32,
	-121, -91, -91, 130, 130, 130, -88, -28, -87, -127,
	-48, 132, -163, -102, -103, -127, -104, -105, 81, 77,
	53, -208, -96, 90, 132, -147, -150, -151, -152, -154,
	-128, -164, -165, -166, -177, 80, 100, 50, 82, 44,
	68, 78, -146, -149, 132, 90, 66, -156, -149, 132,
	-163, 22, -208, 115, -179, 132, 115, 115, 115, 22,
	115, 132, 91, -25, 116, -181, -182, -183, -184, 96,
	63, 102, 52, 89, 99, 49, 51, 86, 43, -114,
	22, -187, -188, -189, -96, -16, -17, -62, -18, -19,
	-20, -21, -22, -23, -24, -13, 123, 122, 127, -14,
	128, 23, 24, 25, 26, 27, -12, 21, 28, 92,
	54, 118, -15, -16, -62, -15, 65, -92, -84, -95,
	-96, 116, -159, 114, 114, 114, -141, 45, 114, 114,
	114, 114, 114, 114, 114, 114, -141, 114, 22, 22,
	22, 103, 34, -96, 116, 116, 117, -2, -1, 133,
	-96, -15, -96, 116, -127, -26, -27, -62, 116, -103,
	-96, -96, 22, -27, -36, -35, 93, -62, 116, -151,
	114, 114, 114, 114, 114, 114, 114, -153, -62, 72,
	-153, 70, -62, -62, -62, -62, -62, -149, -62, -63,
	-62, -62, 66, -149, 66, -62, 116, 115, -208, -216,
	-174, -152, -154, -177, -62, -47, -125, 22, -191, -202,
	-208, -84, 116, -62, 128, 116, 131, 117, 22, -64,
	131, 117, 119, 120, 121, 19, 18, 122, 123, 124,
	125, 126, -13, -16, -16, 131, 131, 116, -95, -100,
	-119, -120, -32, -121, 128, 128, 128, 128, 22, -96,
	-4, -32, -38, -118, -1, -15, 117, 131, 117, 117,
	117, -100, -100, 128, 90, 90, 117, -35, -36, 22,
	22, -153, 22, 22, 22, 22, 22, 117, -167, 76,
	-62, 66, -62, -28, 115, 116, -175, 114, 114, 114,
	116, 117, 116, 116, 116, 115, -40, -65, -76, -78,
	-62, -77, -79, 65, 115, -183, 22, -189, -18, -19,
	-20, -21, -21, -22, -22, -23, -23, -23, 129, 114,
	117, -140, 21, 129, -161, -162, -148, 61, 129, -132,
	-133, -134, 61, 129, -131, -115, -206, -7, 61, 75,
	62, 128, -3, -32, -38, -42, -213, -214, 58, 85,
	117, 134, -15, -15, -96, -27, 114, 114, 129, -132,
	-27, -26, -36, 90, 22, -62, -62, -167, -62, -167,
	116, -28, -125, -221, -92, 129, -185, -120, 117, 129,
	-90, 83, 129, 117, -96, -90, 129, 117, -96, -90,
	129, 117, -96, -136, -137, -138, -139, 61, -90, -214,
	-215, 128, -215, -32, 131, 131, 117, 131, 114, -90,
	129, -26, -167, 116, 37, 116, 115, 116, 21, 128,
	-90, -148, -32, -90, -134, -32, -90, -206, -32, 129,
	-137, 117, -96, -63, -15, 114, 114, -90, 22, -211,
	-210, -209, -44, -43, 39, 47, -63, -139, -32, 129,
	131, 114, 132, 116, -209, -212, -43, -96, -16, 132,
	129, -62, 114, -120, 132, 115, -191, 116,
}
var YaccIdlDef = [...]int{

	2, -2, -2, 3, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 76, 77, 78, 0, 196, 197, 252,
	253, 254, 0, 0, 0, 311, 312, 0, 373, 374,
	375, 385, 386, 0, 0, 134, 135, 136, 137, 138,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 139, 140, 150, 151, 0,
	0, 0, 202, 0, 258, 0, 0, 0, 4, 5,
	6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 26, 0, 0, 0,
	30, 31, 32, 33, 34, 35, 36, 37, 38, 39,
	95, 96, 92, 93, 103, 133, 117, 118, 119, 120,
	129, 131, 26, 97, 98, 99, 100, 107, 108, 109,
	110, 101, 102, 104, 106, 449, 0, 112, 114, 116,
	450, 0, 0, 0, 292, 293, 294, 349, 402, 457,
	177, 180, 181, 0, 0, 0, 81, 82, 121, 122,
	123, 124, 125, 83, 84, 85, 86, 87, 88, 89,
	90, 91, 0, 0, 0, 194, 295, 310, 210, -2,
	274, -2, 321, -2, 0, 274, 204, 260, 0, -2,
	387, 399, 452, 0, 0, 0, 203, 259, 0, 149,
	168, 2, 0, 0, 0, 27, 0, 94, 105, 0,
	0, 111, 113, 146, 290, 291, 0, 348, 350, 352,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 238, 239, 0, 228, 229,
	0, 0, 79, 80, 0, 0, 458, 182, 185, 187,
	188, 183, 184, 0, 0, 0, 0, 209, 211, 213,
	201, 0, 0, 275, 272, 276, 277, 278, 0, 0,
	0, 256, 309, 0, 0, 0, 320, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 316, 317, 0, 0, 0, 0, 0, 0,
	0, 377, 382, 0, 400, 0, 0, 439, 447, 261,
	0, 0, 0, 372, 23, 0, 406, 407, 0, 410,
	411, 412, 413, 414, 415, 416, 417, 418, 0, 420,
	28, 0, 425, 426, 428, 429, 40, 62, 41, 43,
	45, 47, 50, 53, 0, 58, 59, 60, 61, 63,
	0, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 0, 0, 75, 62, 0, 115, 0, 147, 144,
	0, 336, 351, 353, 354, 214, 305, 0, 215, 216,
	217, 218, 219, 220, 221, 222, 304, 223, 0, 0,
	0, 0, 0, 0, 398, 451, 0, 173, 174, 0,
	0, 0, 0, 198, 212, 205, 206, 208, 255, 273,
	0, 0, 0, 262, -2, 265, 0, 271, 314, 323,
	324, 325, 326, 327, 328, 329, 330, 0, 332, 333,
	0, 0, 0, 0, 0, 0, 0, 318, 319, 363,
	24, 337, 0, 0, 0, 347, 380, 210, 0, 0,
	393, 0, 0, 0, 401, 0, 170, 172, 0, 0,
	384, 0, 143, 0, 0, 22, 0, 0, 409, 419,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 57, 0, 29, 128, 130, 195, 145, 0,
	189, 190, 192, 193, 0, 0, 0, 0, 0, 0,
	243, 178, 245, 186, 175, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 267, 269, 331,
	334, 0, 364, 365, 366, 396, 397, 0, 340, 0,
	338, 0, 341, 0, 210, 388, 389, 390, 391, 392,
	169, 0, 436, 446, 141, 146, 0, 153, 154, 155,
	156, 157, 158, 103, 421, 408, 424, 427, 42, 44,
	46, 48, 49, 51, 52, 54, 55, 56, 64, 148,
	0, 0, 306, 355, 0, 359, 360, 0, 368, 0,
	285, 286, 0, 224, 0, 230, 231, 0, 234, 235,
	236, 297, 240, 178, 242, 244, 247, 248, 0, 0,
	0, 176, 0, 0, 0, 207, 279, 280, 0, 0,
	264, 266, 270, 0, 335, 25, 367, 344, 345, 342,
	378, 0, 171, 0, 0, 0, 0, 191, 0, 308,
	356, 0, 357, 0, 0, 369, 370, 0, 0, 225,
	226, 0, 0, 0, 298, 300, 301, 0, 241, 246,
	249, 0, 250, 179, 126, 132, 0, 435, 281, 0,
	0, 268, 346, 379, 0, 142, 0, 405, 307, 0,
	358, 361, 362, 371, 287, 288, 227, 232, 233, 296,
	299, 0, 0, 0, 0, 282, 283, 0, 0, 0,
	159, 160, 0, 163, 0, 0, 0, 302, 303, 251,
	434, 284, 0, 152, 161, 0, 164, 0, 0, 166,
	237, 0, 162, 167, 165, 439, 0, 437,
}
var YaccIdlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 126, 121, 3,
	128, 129, 124, 122, 117, 123, 3, 125, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 132, 114,
	130, 118, 131, 3, 135, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 133, 3, 134, 120, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 115, 119, 116, 127,
}
var YaccIdlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113,
}
var YaccIdlTok3 = [...]int{
	0,
}

var YaccIdlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	YaccIdlDebug        = 0
	YaccIdlErrorVerbose = false
)

type YaccIdlLexer interface {
	Lex(lval *YaccIdlSymType) int
	Error(s string)
}

type YaccIdlParser interface {
	Parse(YaccIdlLexer) int
	Lookahead() int
}

type YaccIdlParserImpl struct {
	lval  YaccIdlSymType
	stack [YaccIdlInitialStackSize]YaccIdlSymType
	char  int
}

func (p *YaccIdlParserImpl) Lookahead() int {
	return p.char
}

func YaccIdlNewParser() YaccIdlParser {
	return &YaccIdlParserImpl{}
}

const YaccIdlFlag = -1000

func YaccIdlTokname(c int) string {
	if c >= 1 && c-1 < len(YaccIdlToknames) {
		if YaccIdlToknames[c-1] != "" {
			return YaccIdlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func YaccIdlStatname(s int) string {
	if s >= 0 && s < len(YaccIdlStatenames) {
		if YaccIdlStatenames[s] != "" {
			return YaccIdlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func YaccIdlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !YaccIdlErrorVerbose {
		return "syntax error"
	}

	for _, e := range YaccIdlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + YaccIdlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := YaccIdlPact[state]
	for tok := TOKSTART; tok-1 < len(YaccIdlToknames); tok++ {
		if n := base + tok; n >= 0 && n < YaccIdlLast && YaccIdlChk[YaccIdlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if YaccIdlDef[state] == -2 {
		i := 0
		for YaccIdlExca[i] != -1 || YaccIdlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; YaccIdlExca[i] >= 0; i += 2 {
			tok := YaccIdlExca[i]
			if tok < TOKSTART || YaccIdlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if YaccIdlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += YaccIdlTokname(tok)
	}
	return res
}

func YaccIdllex1(lex YaccIdlLexer, lval *YaccIdlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = YaccIdlTok1[0]
		goto out
	}
	if char < len(YaccIdlTok1) {
		token = YaccIdlTok1[char]
		goto out
	}
	if char >= YaccIdlPrivate {
		if char < YaccIdlPrivate+len(YaccIdlTok2) {
			token = YaccIdlTok2[char-YaccIdlPrivate]
			goto out
		}
	}
	for i := 0; i < len(YaccIdlTok3); i += 2 {
		token = YaccIdlTok3[i+0]
		if token == char {
			token = YaccIdlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = YaccIdlTok2[1] /* unknown char */
	}
	if YaccIdlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", YaccIdlTokname(token), uint(char))
	}
	return char, token
}

func YaccIdlParse(YaccIdllex YaccIdlLexer) int {
	return YaccIdlNewParser().Parse(YaccIdllex)
}

func (YaccIdlrcvr *YaccIdlParserImpl) Parse(YaccIdllex YaccIdlLexer) int {
	var YaccIdln int
	var YaccIdlVAL YaccIdlSymType
	var YaccIdlDollar []YaccIdlSymType
	_ = YaccIdlDollar // silence set and not used
	YaccIdlS := YaccIdlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	YaccIdlstate := 0
	YaccIdlrcvr.char = -1
	YaccIdltoken := -1 // YaccIdlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		YaccIdlstate = -1
		YaccIdlrcvr.char = -1
		YaccIdltoken = -1
	}()
	YaccIdlp := -1
	goto YaccIdlstack

ret0:
	return 0

ret1:
	return 1

YaccIdlstack:
	/* put a state and value onto the stack */
	if YaccIdlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", YaccIdlTokname(YaccIdltoken), YaccIdlStatname(YaccIdlstate))
	}

	YaccIdlp++
	if YaccIdlp >= len(YaccIdlS) {
		nyys := make([]YaccIdlSymType, len(YaccIdlS)*2)
		copy(nyys, YaccIdlS)
		YaccIdlS = nyys
	}
	YaccIdlS[YaccIdlp] = YaccIdlVAL
	YaccIdlS[YaccIdlp].yys = YaccIdlstate

YaccIdlnewstate:
	YaccIdln = YaccIdlPact[YaccIdlstate]
	if YaccIdln <= YaccIdlFlag {
		goto YaccIdldefault /* simple state */
	}
	if YaccIdlrcvr.char < 0 {
		YaccIdlrcvr.char, YaccIdltoken = YaccIdllex1(YaccIdllex, &YaccIdlrcvr.lval)
	}
	YaccIdln += YaccIdltoken
	if YaccIdln < 0 || YaccIdln >= YaccIdlLast {
		goto YaccIdldefault
	}
	YaccIdln = YaccIdlAct[YaccIdln]
	if YaccIdlChk[YaccIdln] == YaccIdltoken { /* valid shift */
		YaccIdlrcvr.char = -1
		YaccIdltoken = -1
		YaccIdlVAL = YaccIdlrcvr.lval
		YaccIdlstate = YaccIdln
		if Errflag > 0 {
			Errflag--
		}
		goto YaccIdlstack
	}

YaccIdldefault:
	/* default state action */
	YaccIdln = YaccIdlDef[YaccIdlstate]
	if YaccIdln == -2 {
		if YaccIdlrcvr.char < 0 {
			YaccIdlrcvr.char, YaccIdltoken = YaccIdllex1(YaccIdllex, &YaccIdlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if YaccIdlExca[xi+0] == -1 && YaccIdlExca[xi+1] == YaccIdlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			YaccIdln = YaccIdlExca[xi+0]
			if YaccIdln < 0 || YaccIdln == YaccIdltoken {
				break
			}
		}
		YaccIdln = YaccIdlExca[xi+1]
		if YaccIdln < 0 {
			goto ret0
		}
	}
	if YaccIdln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			YaccIdllex.Error(YaccIdlErrorMessage(YaccIdlstate, YaccIdltoken))
			Nerrs++
			if YaccIdlDebug >= 1 {
				__yyfmt__.Printf("%s", YaccIdlStatname(YaccIdlstate))
				__yyfmt__.Printf(" saw %s\n", YaccIdlTokname(YaccIdltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for YaccIdlp >= 0 {
				YaccIdln = YaccIdlPact[YaccIdlS[YaccIdlp].yys] + YaccIdlErrCode
				if YaccIdln >= 0 && YaccIdln < YaccIdlLast {
					YaccIdlstate = YaccIdlAct[YaccIdln] /* simulate a shift of "error" */
					if YaccIdlChk[YaccIdlstate] == YaccIdlErrCode {
						goto YaccIdlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if YaccIdlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", YaccIdlS[YaccIdlp].yys)
				}
				YaccIdlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if YaccIdlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", YaccIdlTokname(YaccIdltoken))
			}
			if YaccIdltoken == YaccIdlEofCode {
				goto ret1
			}
			YaccIdlrcvr.char = -1
			YaccIdltoken = -1
			goto YaccIdlnewstate /* try again in the same state */
		}
	}

	/* reduction by production YaccIdln */
	if YaccIdlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", YaccIdln, YaccIdlStatname(YaccIdlstate))
	}

	YaccIdlnt := YaccIdln
	YaccIdlpt := YaccIdlp
	_ = YaccIdlpt // guard against "declared and not used"

	YaccIdlp -= YaccIdlR2[YaccIdln]
	// YaccIdlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if YaccIdlp+1 >= len(YaccIdlS) {
		nyys := make([]YaccIdlSymType, len(YaccIdlS)*2)
		copy(nyys, YaccIdlS)
		YaccIdlS = nyys
	}
	YaccIdlVAL = YaccIdlS[YaccIdlp+1]

	/* consult goto table to find next state */
	YaccIdln = YaccIdlR1[YaccIdln]
	YaccIdlg := YaccIdlPgo[YaccIdln]
	YaccIdlj := YaccIdlg + YaccIdlS[YaccIdlp].yys + 1

	if YaccIdlj >= YaccIdlLast {
		YaccIdlstate = YaccIdlAct[YaccIdlg]
	} else {
		YaccIdlstate = YaccIdlAct[YaccIdlj]
		if YaccIdlChk[YaccIdlstate] != -YaccIdln {
			YaccIdlstate = YaccIdlAct[YaccIdlg]
		}
	}
	// dummy call; replaced with literal code
	switch YaccIdlnt {

	case 1:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:233
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("specification/definitionPlus", YaccIdlDollar[1].Node)
			}

			if assignSpecification, ok := YaccIdllex.(IAssignSpecification); ok {
				assignSpecification.AssignSpecification(YaccIdlDollar[1].Node)
				goto exitBlock_specification_definitionPlus
			}
			YaccIdllex.Error("IAssignSpecification not implemented")
			return 1

		exitBlock_specification_definitionPlus:
		}
	case 2:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:250
		{
			//??
		}
	case 3:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:254
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definitionPlus/definition", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 4:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:260
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definitionPlus/definitionPlus definition", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			}
			if YaccIdlDollar[1].Node != nil && YaccIdlDollar[2].Node != nil {
				node := YaccIdlDollar[1].Node
				for node.GetNextNode() != nil {
					node = node.GetNextNode()
				}
				_ = node.SetNextNode(YaccIdlDollar[2].Node)
				YaccIdlVAL.Node = YaccIdlDollar[1].Node
			} else if YaccIdlDollar[1].Node == nil && YaccIdlDollar[2].Node != nil {
				YaccIdlVAL.Node = YaccIdlDollar[2].Node
			} else if YaccIdlDollar[1].Node != nil && YaccIdlDollar[2].Node == nil {
				YaccIdlVAL.Node = YaccIdlDollar[1].Node
			}
		}
	case 5:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:280
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/module_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 6:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:287
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/const_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 7:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:294
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/type_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 8:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:301
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/except_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 9:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:308
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/interface_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 10:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:315
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/value_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 11:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:322
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/type_id_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 12:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:329
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/type_prefix_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 13:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:336
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/import_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 14:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:343
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/component_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 15:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:350
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/home_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 16:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:357
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/event_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 17:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:364
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/porttype_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 18:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:371
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/connector_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 19:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:378
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/template_module_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 20:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:385
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/template_module_inst", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node

		}
	case 21:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:393
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("definition/annotation_dcl", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 22:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:403
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("RWmodule Identifier '{' definitionPlus '}'", YaccIdlDollar[2].Node, YaccIdlDollar[4].Node)
			}
			var err error
			YaccIdlVAL.Node, err = newModuleDcl(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[2].Node.Identifier(), YaccIdlDollar[4].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 23:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:415
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("RWmodule Identifier '{'  '}'", YaccIdlDollar[2].Node)
			}
			var err error
			YaccIdlVAL.Node, err = newModuleDcl(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[2].Node.Identifier(), nil)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 24:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:429
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("scoped_namePlus/scoped_name", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 25:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:436
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("scoped_namePlus/scoped_namePlus ',' scoped_name", YaccIdlDollar[1].Node, YaccIdlDollar[3].Node)
			}
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			_ = node.SetNextNode(YaccIdlDollar[3].Node)
		}
	case 26:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:448
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("scoped_name/Identifier", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node, _ = newScopeName(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[1].Node.Identifier())
		}
	case 27:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:455
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("scoped_name/ScopeOp Identifier", YaccIdlDollar[2].Node)
			}
			YaccIdlVAL.Node, _ = newScopeName(YaccIdlDollar[1].Node.LexemData(), "::"+YaccIdlDollar[2].Node.Identifier())
		}
	case 28:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:462
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("scoped_name/scoped_name ScopeOp Identifier", YaccIdlDollar[1].Node, YaccIdlDollar[3].Node)
			}
			YaccIdlVAL.Node, _ = newScopeName(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[1].Node.Identifier()+"::"+YaccIdlDollar[3].Node.Identifier())
		}
	case 29:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:471
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("RWconst const_type Identifier '=' const_expr", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node, YaccIdlDollar[3].Node, YaccIdlDollar[5].Value)
			}

			var err error
			YaccIdlVAL.Node, err = NewConstDcl(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[2].Node, YaccIdlDollar[3].Node.Identifier(), YaccIdlDollar[5].Value)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 30:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:486
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/integer_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 31:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:493
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/floating_pt_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 32:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:500
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/fixed_pt_const_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 33:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:507
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/char_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 34:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:514
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/wide_char_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 35:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:521
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/boolean_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 36:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:528
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/octet_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 37:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:535
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/string_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 38:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:542
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/wide_string_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 39:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:549
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_type/wide_string_type", YaccIdlDollar[1].Node)
			}
			//		$$ = NewYaccNode($1.Identifier(),$1.LexemData())
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 40:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:559
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("const_expr/or_expr")
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 41:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:568
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("or_expr/xor_expr", YaccIdlDollar[1].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 42:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:575
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("or_expr/or_expr '|' xor_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value)
			v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value)
			if ok1 && ok3 {
				var err error
				YaccIdlVAL.Value, err = NewInt64Value(v1.Int64Value() | v3.Int64Value())
				if err != nil {
					YaccIdllex.Error(err.Error())
					return 1
				}
				goto exitBlock_or_expr_or_xor_expr
			}
			YaccIdllex.Error("type not supported (| operator)")
			return 1
		exitBlock_or_expr_or_xor_expr:
		}
	case 43:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:597
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("xor_expr/and_expr", YaccIdlDollar[1].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 44:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:604
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("xor_expr/xor_expr '^' and_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			YaccIdllex.Error("Impelemnt me!! '^'")
			return 1
			//		$$ = $1 ^ $3
		}
	case 45:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:616
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("and_expr/shift_expr", YaccIdlDollar[1].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 46:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:623
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("and_expr/and_expr '&' shift_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value)
			v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value)
			if ok1 && ok3 {
				var err error
				YaccIdlVAL.Value, err = NewInt64Value(v1.Int64Value() & v3.Int64Value())
				if err != nil {
					YaccIdllex.Error(err.Error())
					return 1
				}
			} else {
				YaccIdllex.Error("type not supported (& operator)")
				return 1
			}
		}
	case 47:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:645
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("shift_expr/add_expr", YaccIdlDollar[1].Value)
			}
			var err error
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 48:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:657
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("shift_expr/shift_expr ShrOp add_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value)
			v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value)
			if ok1 && ok3 {
				if v3.Int64Value() < 0 {
					YaccIdllex.Error("shift count must be positive")
				}
				YaccIdlVAL.Value, _ = NewInt64Value(v1.Int64Value() >> v3.Int64Value())
				//
				goto exitBlock_shift_expr_ShrOp_add_expr
			}
			YaccIdllex.Error("type not supported(>> operator)")
			return 1
			//
		exitBlock_shift_expr_ShrOp_add_expr: // exit block
		}
	case 49:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:677
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("shift_expr/shift_expr ShlOp add_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value)
			v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value)
			if ok1 && ok3 {
				if v3.Int64Value() < 0 {
					YaccIdllex.Error("shift count must be positive")
				}
				YaccIdlVAL.Value, _ = NewInt64Value(v1.Int64Value() << v3.Int64Value())
				//
				goto exitBlock_shift_expr_ShlOp_add_expr
			}
			YaccIdllex.Error("type not supported (<< operator)")
			return 1
			//
		exitBlock_shift_expr_ShlOp_add_expr: // exit block
		}
	case 50:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:699
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("add_expr/mult_expr", YaccIdlDollar[1].Value)
			}
			var err error
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 51:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:711
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("add_expr/add_expr '+' mult_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value); ok3 {
					if ok1 && ok3 {
						YaccIdlVAL.Value, _ = NewInt64Value(v1.Int64Value() + v3.Int64Value())
						//
						goto exitBlock_add_expr_plus_mult_expr
					}
				}
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IStringValue); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IStringValue); ok3 {
					if ok1 && ok3 {
						YaccIdlVAL.Value, _ = NewStringValue(v1.StringValue() + v3.StringValue())
						//
						goto exitBlock_add_expr_plus_mult_expr
					}
				}
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IFloat64Value); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IFloat64Value); ok3 {
					if ok1 && ok3 {
						YaccIdlVAL.Value, _ = newFloat64Value(v1.FloatValue() + v3.FloatValue())
						//
						goto exitBlock_add_expr_plus_mult_expr
					}
				}
			}

			YaccIdllex.Error("type not supported (+ operator)")
			return 1
			//
		exitBlock_add_expr_plus_mult_expr:
		}
	case 52:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:749
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("add_expr/add_expr '-' mult_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value); ok3 {
					if ok1 && ok3 {
						YaccIdlVAL.Value, _ = NewInt64Value(v1.Int64Value() - v3.Int64Value())
						//
						goto exitBlock_add_expr_minus_mult_expr
					}
				}
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IFloat64Value); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IFloat64Value); ok3 {
					if ok1 && ok3 {
						YaccIdlVAL.Value, _ = newFloat64Value(v1.FloatValue() - v3.FloatValue())
						//
						goto exitBlock_add_expr_minus_mult_expr
					}
				}
			}
			YaccIdllex.Error("type not supported (- Operator)")
			return 1
			//
		exitBlock_add_expr_minus_mult_expr:
		}
	case 53:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:779
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("mult_expr/unary_expr", YaccIdlDollar[1].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 54:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:786
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("mult_expr/mult_expr '*' unary_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value); ok3 {
					YaccIdlVAL.Value, _ = NewInt64Value(v1.Int64Value() * v3.Int64Value())
					//
					goto exitBlock_mult_expr_star_unary_expr
				}
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IFloat64Value); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IFloat64Value); ok3 {
					YaccIdlVAL.Value, _ = newFloat64Value(v1.FloatValue() * v3.FloatValue())
					//
					goto exitBlock_mult_expr_star_unary_expr
				}
			}

			YaccIdllex.Error("type not supported (* operator)")
			return 1
			//
		exitBlock_mult_expr_star_unary_expr:
		}
	case 55:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:811
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("mult_expr/mult_expr '/' unary_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value); ok3 {
					YaccIdlVAL.Value, _ = NewInt64Value(v1.Int64Value() / v3.Int64Value())
					//
					goto exitBlock_mult_expr_divide_unary_expr
				}
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IFloat64Value); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IFloat64Value); ok3 {
					YaccIdlVAL.Value, _ = newFloat64Value(v1.FloatValue() / v3.FloatValue())
					//
					goto exitBlock_mult_expr_divide_unary_expr
				}
			}

			YaccIdllex.Error("type not supported (/ operator)")
			return 1
			//
		exitBlock_mult_expr_divide_unary_expr:
		}
	case 56:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:836
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("mult_expr/mult_expr '%' unary_expr", YaccIdlDollar[1].Value, YaccIdlDollar[3].Value)
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value); ok1 {
				if v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value); ok3 {
					YaccIdlVAL.Value, _ = NewInt64Value(v1.Int64Value() % v3.Int64Value())
					//
					goto exitBlock_mult_expr_perc_unary_expr
				}
			}
			YaccIdllex.Error("type not supported (% operator)")
			return 1
			//
		exitBlock_mult_expr_perc_unary_expr:
		}
	case 57:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:855
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unary_expr/unary_operator primary_expr", YaccIdlDollar[1].Value, YaccIdlDollar[2].Value)
			}
			if v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value); ok1 {
				if v2, ok2 := YaccIdlDollar[2].Value.(IInt64Value); ok2 {
					YaccIdlVAL.Value, _ = NewInt64Value(v1.Int64Value() * v2.Int64Value())
					//
					goto exitBlock_unary_operator_primary_expr
				}
			}
			YaccIdllex.Error("type not supported (+- operator)")
			return 1
			//
		exitBlock_unary_operator_primary_expr:
		}
	case 58:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:872
		{
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 59:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:878
		{
			YaccIdlVAL.Value, _ = NewInt64Value(-1)
		}
	case 60:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:882
		{
			YaccIdlVAL.Value, _ = NewInt64Value(+1)
		}
	case 61:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:886
		{
			YaccIdllex.Error("Impelemnt me!! '~'")
			return 1
		}
	case 62:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:893
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("primary_expr/scoped_name", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Value = newScopeNameValue(YaccIdlDollar[1].Node.Identifier())
		}
	case 63:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:900
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("primary_expr/literal", YaccIdlDollar[1].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 64:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:907
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("primary_expr/'(' const_expr ')'", YaccIdlDollar[2].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[2].Value
		}
	case 65:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:916
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("literal/Integer_literal", YaccIdlDollar[1].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 66:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:923
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("literal/Floating_pt_literal", YaccIdlDollar[1].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 67:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:930
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("literal/Fixed_pt_literal", YaccIdlDollar[1].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 68:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:937
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("literal/Character_literal", YaccIdlDollar[1].CharValue)
			}
			var err error
			YaccIdlVAL.Value, err = NewCharValue(YaccIdlDollar[1].CharValue)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 69:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:949
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("literal/Wide_Character_literal", YaccIdlDollar[1].CharValue)
			}
			var err error
			YaccIdlVAL.Value, err = NewWideCharValue(YaccIdlDollar[1].CharValue)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 70:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:961
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("literal/boolean_literal", YaccIdlDollar[1].BoolValue)
			}
			var err error
			YaccIdlVAL.Value, err = NewBooleanValue(YaccIdlDollar[1].BoolValue)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 71:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:973
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("literal/String_literal", YaccIdlDollar[1].Node)
			}
			var err error
			YaccIdlVAL.Value, err = NewStringValue(YaccIdlDollar[1].Node.Identifier())
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 72:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:985
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("literal/Wide_String_literal", YaccIdlDollar[1].Node)
			}
			var err error
			YaccIdlVAL.Value, err = NewWideStringValue(YaccIdlDollar[1].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 73:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:999
		{
			YaccIdlVAL.BoolValue = true
		}
	case 74:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1003
		{
			YaccIdlVAL.BoolValue = false
		}
	case 75:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1009
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("positive_int_const/const_expr", YaccIdlDollar[1].Value)
			}
			v1, ok1 := YaccIdlDollar[1].Value.(IInt64Value)
			if ok1 {
				if v1.Int64Value() < 0 {
					YaccIdllex.Error("expression must be positive")
					return 1
				}
				YaccIdlVAL.Value = YaccIdlDollar[1].Value
				//
				goto exitBlock_positive_int_const_const_expr
			}
			YaccIdllex.Error("type not supported (const_expr)")
			return 1
			//
		exitBlock_positive_int_const_const_expr:
		}
	case 76:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1031
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 77:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1035
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 78:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1039
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 79:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1045
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("type_spec/simple_type_spec", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 80:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1052
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("type_spec/template_type_spec")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 81:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1062
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("simple_type_spec/base_type_spec", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 82:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1069
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("simple_type_spec/scoped_name", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 83:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1078
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("base_type_spec/integer_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 84:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1085
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("base_type_spec/floating_pt_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 85:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1092
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("base_type_spec/char_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 86:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1099
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("base_type_spec/wide_char_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 87:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1106
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("base_type_spec/boolean_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 88:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1113
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("base_type_spec/octet_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 89:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1120
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("base_type_spec/any_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 90:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1127
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("base_type_spec/object_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 91:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1134
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("base_type_spec/value_base_type", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 92:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1143
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("floating_pt_type/RWfloat")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlFloatType); ok {
				YaccIdlVAL.Node = defaultTypes.FloatType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no float primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlFloatType interface")
				return 1
			}
		}
	case 93:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1158
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("floating_pt_type/RWdouble")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlDoubleType); ok {
				YaccIdlVAL.Node = defaultTypes.DoubleType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no double primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlDoubleType interface")
				return 1
			}
		}
	case 94:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1173
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("floating_pt_type/RWlong RWdouble")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlLongDoubleType); ok {
				YaccIdlVAL.Node = defaultTypes.LongDoubleType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no long double primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlLongDoubleType interface")
				return 1
			}
		}
	case 95:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1191
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 96:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1195
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 97:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1201
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 98:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1204
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 99:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1207
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 100:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1210
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 101:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1216
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("signed_short_int/RWshort")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlShortType); ok {
				YaccIdlVAL.Node = defaultTypes.ShortType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no short primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no ShortType interface")
				return 1
			}
		}
	case 102:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1232
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("signed_short_int/RWint16")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlInt16Type); ok {
				YaccIdlVAL.Node = defaultTypes.Int16Type()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no Int16 primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlInt16Type interface")
				return 1
			}
		}
	case 103:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1250
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("signed_long_int/RWlong", YaccIdlDollar[1].Node)
			}
			if defaultTypes, ok := YaccIdllex.(IIdlLongType); ok {
				YaccIdlVAL.Node = defaultTypes.LongType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no long primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlLongType interface")
				return 1
			}
		}
	case 104:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1266
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("signed_long_int/RWint32")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlInt32Type); ok {
				YaccIdlVAL.Node = defaultTypes.Int32Type()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no Int32 primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlInt32Type interface")
				return 1
			}
		}
	case 105:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1285
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("signed_longlong_int/RWlong RWlong")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlLongLongType); ok {
				YaccIdlVAL.Node = defaultTypes.LongLongType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no long long primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlLongLongType interface")
				return 1
			}
		}
	case 106:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1301
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("signed_longlong_int/RWint64")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlInt64Type); ok {
				YaccIdlVAL.Node = defaultTypes.Int64Type()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no Int64 primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlInt64Type interface")
				return 1
			}

		}
	case 107:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1322
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_int/unsigned_short_int", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 108:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1328
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_int/unsigned_long_int", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 109:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1334
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_int/unsigned_longlong_int", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 110:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1340
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_int/unsigned_tiny_int", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 111:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1350
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_short_int/RWunsigned RWshort")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlUnsignedShortType); ok {
				YaccIdlVAL.Node = defaultTypes.UnsignedShortType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no unsigned short primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlUnsignedShortType interface")
				return 1
			}
		}
	case 112:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1366
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_short_int/RWuint16")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlUint16Type); ok {
				YaccIdlVAL.Node = defaultTypes.Uint16Type()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no Uint16 primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlUint16Type interface")
				return 1
			}
		}
	case 113:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1385
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_long_int/RWunsigned RWlong")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlUnsignedLongType); ok {
				YaccIdlVAL.Node = defaultTypes.UnsignedLongType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no unsigned long primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlUnsignedLongType interface")
				return 1
			}
		}
	case 114:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1401
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_long_int/RWuint32")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlUint32Type); ok {
				YaccIdlVAL.Node = defaultTypes.Uint32Type()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no Uint32 primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlUint32Type interface")
				return 1
			}
		}
	case 115:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:1420
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_longlong_int/RWunsigned RWlong RWlong")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlUnsignedLongLongType); ok {
				YaccIdlVAL.Node = defaultTypes.UnsignedLongLongType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no unsigned long long  primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlUnsignedLongLongType interface")
				return 1
			}
		}
	case 116:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1436
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_longlong_int/RWuint64")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlUint64Type); ok {
				YaccIdlVAL.Node = defaultTypes.Uint64Type()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no Uint64 primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlUint64Type interface")
				return 1
			}
		}
	case 117:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1455
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("char_type/RWchar")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlCharType); ok {
				YaccIdlVAL.Node = defaultTypes.CharType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no char primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlCharType interface")
				return 1
			}
		}
	case 118:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1472
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("wide_char_type/RWwchar")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlWideCharType); ok {
				YaccIdlVAL.Node = defaultTypes.WideCharType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no wide char primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlWideCharType interface")
				return 1
			}
		}
	case 119:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1490
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("boolean_type/RWboolean")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlBooleanType); ok {
				YaccIdlVAL.Node = defaultTypes.BooleanType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no boolean primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlBooleanType interface")
				return 1
			}
		}
	case 120:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1508
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("octet_type/RWoctet")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlOctetType); ok {
				YaccIdlVAL.Node = defaultTypes.OctetType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no octet primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlOctetType interface")
				return 1
			}
		}
	case 121:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1526
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("template_type_spec/sequence_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 122:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1533
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("template_type_spec/string_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 123:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1540
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("template_type_spec/wide_string_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 124:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1547
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("template_type_spec/fixed_pt_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 125:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1554
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("template_type_spec/map_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 126:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:1563
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("sequence_type/RWsequence '<' type_spec ',' positive_int_const '>'", YaccIdlDollar[3].Node, YaccIdlDollar[5].Value)
			}
			if v5, ok5 := YaccIdlDollar[5].Value.(IInt64Value); ok5 {
				if v5.Int64Value() <= 0 {
					YaccIdllex.Error("need a positive int")
					return 1
				}
				var err error
				YaccIdlVAL.Node, err = newSequenceType(__yyfmt__.Sprintf("%v", YaccIdlDollar[3].Node.Identifier()), YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[3].Node, v5.Int64Value())
				if err != nil {
					YaccIdllex.Error(err.Error())
					return 1
				}
			}
		}
	case 127:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:1581
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("sequence_type/RWsequence '<' type_spec '>'", YaccIdlDollar[3].Node)
			}
			var err error
			YaccIdlVAL.Node, err = newSequenceType(__yyfmt__.Sprintf("%v", YaccIdlDollar[3].Node.Identifier()), YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[3].Node, 0)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 128:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:1595
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("string_type/RWstring '<' positive_int_const '>'", YaccIdlDollar[3].Value)
			}
			if v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value); ok3 {
				if v3.Int64Value() <= 0 {
					YaccIdllex.Error("need a positive int")
					return 1
				}
				var err error
				YaccIdlVAL.Node, err = newStringType(v3.Int64Value())
				if err != nil {
					YaccIdllex.Error(err.Error())
					return 1
				}
			}
		}
	case 129:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1613
		{
			if defaultTypes, ok := YaccIdllex.(IIdlStringType); ok {
				YaccIdlVAL.Node = defaultTypes.StringType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no string primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlStringType interface")
				return 1
			}
		}
	case 130:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:1628
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("wide_string_type/RWwstring '<' positive_int_const '>'", YaccIdlDollar[3].Value)
			}
			if v3, ok3 := YaccIdlDollar[3].Value.(IInt64Value); ok3 {
				if v3.Int64Value() <= 0 {
					YaccIdllex.Error("need a positive int")
					return 1
				}
				var err error
				YaccIdlVAL.Node, err = newWideStringType(v3.Int64Value())
				if err != nil {
					YaccIdllex.Error(err.Error())
					return 1
				}
			}
		}
	case 131:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1646
		{
			if defaultTypes, ok := YaccIdllex.(IIdlWideStringType); ok {
				YaccIdlVAL.Node = defaultTypes.WideStringType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no wide string primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlWideStringType interface")
				return 1
			}
		}
	case 132:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:1661
		{
			//		if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
			//yaccLogger.Log("fixed_pt_type/RWfixed '<' positive_int_const ',' positive_int_const '>'", $3)
			//}
			//		if $3 <= 0 {
			//			YaccIdllex.Error("need a positive int")
			//			return 1
			//		}
			//		if $5 <= 0 {
			//			YaccIdllex.Error("need a positive int")
			//			return 1
			//		}
			//		var err error
			//		$$, err = scopedObjects.NewFixedPointType($1, $3, $5)
			//		if err != nil {
			//			YaccIdllex.Error(err.Error())
			//			return 1
			//		}
		}
	case 133:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1683
		{
			//		YaccIdllex.Error("fix this")
			//		return 1
		}
	case 134:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1690
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 135:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1694
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 136:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1698
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 137:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1702
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 138:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1706
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 139:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1713
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 140:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1717
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 141:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:1722
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("RWstruct Identifier '{' memberPlus '}'", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node, YaccIdlDollar[4].Node)
			}
			var err error
			YaccIdlVAL.Node, err = NewStructType(YaccIdlDollar[2].Node, nil, YaccIdlDollar[4].Node, false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 142:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-7 : YaccIdlpt+1]
//line ./goyaccidl.y:1734
		{
			var err error
			YaccIdlVAL.Node, err = NewStructType(YaccIdlDollar[2].Node, YaccIdlDollar[4].Node, YaccIdlDollar[6].Node, false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 143:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:1743
		{
			var err error
			YaccIdlVAL.Node, err = NewStructType(YaccIdlDollar[2].Node, nil, nil, false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 144:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1755
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("memberPlus/member")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 145:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1762
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("memberPlus/memberPlus member")
			}
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			_ = node.SetNextNode(YaccIdlDollar[2].Node)
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 146:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:1774
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("memberStar/")
			}
			YaccIdlVAL.Node = nil
		}
	case 147:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1781
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("memberStar/memberPlus")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 148:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:1790
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("member/type_spec declarators", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			}
			var err error
			YaccIdlVAL.Node, err = NewStructMember(YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 149:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1804
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("struct_forward_dcl/RWstruct Identifier")
			}
			var err error
			YaccIdlVAL.Node, err = NewStructType(YaccIdlDollar[2].Node, nil, nil, true)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 150:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1818
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("union_dcl/union_def")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 151:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1825
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("union_dcl/union_forward_dcl")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 152:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-9 : YaccIdlpt+1]
//line ./goyaccidl.y:1834
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("union_def/RWunion Identifier RWswitch '(' switch_type_spec ')' '{' switch_body '}'")
			}
			YaccIdlVAL.Node = NewUnionDcl(YaccIdlDollar[2].Node, YaccIdlDollar[5].Node, YaccIdlDollar[8].UnionBody, false)
		}
	case 153:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1843
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("switch_type_spec/integer_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 154:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1850
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("switch_type_spec/char_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 155:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1857
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("switch_type_spec/boolean_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 156:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1864
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("switch_type_spec/scoped_name")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 157:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1871
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("switch_type_spec/wide_char_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 158:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1878
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("switch_type_spec/octet_type")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 159:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1887
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("switch_body/casePlus")
			}
			YaccIdlVAL.UnionBody = YaccIdlDollar[1].UnionBody
		}
	case 160:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1895
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("casePlus/case")
			}
			YaccIdlVAL.UnionBody = YaccIdlDollar[1].UnionBody
		}
	case 161:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1902
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("casePlus/casePlus case")
			}
			node := YaccIdlDollar[1].UnionBody
			for node.GetNextNode() != nil {
				var err error
				node, err = node.GetNextUnionBody()
				if err != nil {
					YaccIdllex.Error(err.Error())
					return 1
				}
			}
			node.SetNextUnionBody(YaccIdlDollar[2].UnionBody)
			YaccIdlVAL.UnionBody = YaccIdlDollar[1].UnionBody
		}
	case 162:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:1921
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("case/case_labelPlus element_spec ';'")
			}
			YaccIdlVAL.UnionBody = NewUnionBody(YaccIdlDollar[1].ConstValue.LexemData(), "UnionCaseLabel", YaccIdlDollar[1].ConstValue, YaccIdlDollar[2].ElementSpec)
		}
	case 163:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:1930
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("case_labelPlus/case_label")
			}
			YaccIdlVAL.ConstValue = YaccIdlDollar[1].ConstValue
		}
	case 164:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1937
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("case_labelPlus/ase_labelPlus case_label")
			}
			node := YaccIdlDollar[1].ConstValue
			for node.GetNextNode() != nil {
				var err error
				node, err = node.GetNextConstValue()
				if err != nil {
					YaccIdllex.Error(err.Error())
					return 1
				}
			}
			node.SetNextConstValue(YaccIdlDollar[2].ConstValue)
			YaccIdlVAL.ConstValue = YaccIdlDollar[1].ConstValue
		}
	case 165:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:1956
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("case_label/RWcase const_expr ':'")
			}
			YaccIdlVAL.ConstValue = NewConstValue("constvalue", YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[2].Value)

		}
	case 166:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1964
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("case_label/RWdefault ':'")
			}
			YaccIdlVAL.ConstValue = NewDefaultValue("default", YaccIdlDollar[1].Node.LexemData())
		}
	case 167:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1973
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("element_spec/type_spec declarator")
			}
			YaccIdlVAL.ElementSpec = NewElementSpec(YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
		}
	case 168:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:1982
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("union_forward_dcl/RWunion Identifier")
			}
			YaccIdlVAL.Node = NewUnionDcl(YaccIdlDollar[2].Node, nil, nil, true)
		}
	case 169:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:1993
		{
			var err error
			YaccIdlVAL.Node, err = newEnumDcl(YaccIdlDollar[2].Node, YaccIdlDollar[4].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 170:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2003
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("enumerators/enumerator| enumerators ',' enumerator", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 171:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2010
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("enumerators/enumerator| enumerators ',' enumerator", YaccIdlDollar[1].Node, YaccIdlDollar[3].Node)
			}
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			node.SetNextNode(YaccIdlDollar[3].Node)
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 172:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2023
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("enumerator/Identifier", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 173:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2032
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("array_declarator/Identifier fixed_array_sizePlus", YaccIdlDollar[1].Node, YaccIdlDollar[2].Value)
			}
			var a []int64 = nil
			for node := YaccIdlDollar[2].Value; node != nil; node = node.GetNextNode() {
				if v1, ok1 := node.(IInt64Value); ok1 {
					a = append(a, v1.Int64Value())
				}
			}
			YaccIdlDollar[1].Node.AddArray(a)
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 174:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2048
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("fixed_array_size", YaccIdlDollar[1].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 175:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2055
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("fixed_array_sizePlus fixed_array_size", YaccIdlDollar[1].Value, YaccIdlDollar[2].Value)
			}
			node := YaccIdlDollar[1].Value
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			node.SetNextNode(YaccIdlDollar[2].Value)
			YaccIdlVAL.Value = YaccIdlDollar[1].Value
		}
	case 176:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2068
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("'[' positive_int_const ']'", YaccIdlDollar[2].Value)
			}
			YaccIdlVAL.Value = YaccIdlDollar[2].Value
		}
	case 177:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2077
		{
			YaccIdlVAL.Node, _ = newNativeDcl(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[2].Node.Identifier())
		}
	case 178:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2083
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("simple_declaratorPlus/simple_declarator")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 179:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2090
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("simple_declaratorPlus/simple_declaratorPlus ',' simple_declarator")
			}
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			node.SetNextNode(YaccIdlDollar[3].Node)
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 180:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2104
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 181:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2110
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("typedef_dcl/RWtypedef type_declarator", YaccIdlDollar[2].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[2].Node
		}
	case 182:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2120
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("type_declarator/simple_type_spec any_declarators", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			}
			YaccIdlVAL.Node, _ = newTypeDeclarator(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[1].Node.Identifier(), YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
		}
	case 183:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2127
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("type_declarator/template_type_spec any_declarators", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			}
			YaccIdlVAL.Node, _ = newTypeDeclarator(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[1].Node.Identifier(), YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
		}
	case 184:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2134
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("type_declarator/constr_type_dcl any_declarators", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			}
			YaccIdlVAL.Node, _ = newTypeDeclarator(YaccIdlDollar[2].Node.LexemData(), YaccIdlDollar[1].Node.Identifier(), YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
		}
	case 185:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2143
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("any_declaratorsPlus/any_declarator", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 186:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2150
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("any_declaratorsPlus/any_declaratorsPlus ',' any_declarator", YaccIdlDollar[1].Node, YaccIdlDollar[3].Node)
			}
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			_ = node.SetNextNode(YaccIdlDollar[3].Node)
		}
	case 187:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2164
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("declarator/any_declarator:", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 188:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2171
		{

		}
	case 189:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2177
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("declaratorPlus", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 190:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2186
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("declaratorPlus/declarator", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 191:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2193
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("declaratorPlus/declaratorPlus ',' declarator", YaccIdlDollar[1].Node, YaccIdlDollar[3].Node)
			}
			// find last
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			//assign
			node.SetNextNode(YaccIdlDollar[3].Node)
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 192:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2208
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("declarator/simple_declarator", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 193:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2215
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("array_declarator", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 194:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2224
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("any_type/RWany")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlAnyType); ok {
				YaccIdlVAL.Node = defaultTypes.AnyType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no any primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlAnyType interface")
				return 1
			}
		}
	case 195:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:2242
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("RWexception Identifier '{' memberStar '}'", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			}
			var err error
			YaccIdlVAL.Node, err = newExceptionDcl(YaccIdlDollar[2].Node, YaccIdlDollar[4].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 196:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2256
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_dcl/interface_def", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 197:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2264
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_dcl/interface_forward_dcl", YaccIdlDollar[1].InterfaceHeader)
			}

			var err error
			YaccIdlVAL.Node, err = newInterfaceDcl(YaccIdlDollar[1].InterfaceHeader.LexemData(), YaccIdlDollar[1].InterfaceHeader.Identifier(), YaccIdlDollar[1].InterfaceHeader, nil, true)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 198:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:2279
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_def/interface_header '{' interface_body '}'", YaccIdlDollar[1].InterfaceHeader, YaccIdlDollar[3].Node)
			}
			var err error
			YaccIdlVAL.Node, err = newInterfaceDcl(YaccIdlDollar[1].InterfaceHeader.LexemData(), YaccIdlDollar[1].InterfaceHeader.Identifier(), YaccIdlDollar[1].InterfaceHeader, YaccIdlDollar[3].Node, false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 199:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2293
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_forward_dcl/interface_kind Identifier", YaccIdlDollar[2].Node)
			}
			var err error
			YaccIdlVAL.InterfaceHeader, err = newInterfaceHeader(YaccIdlDollar[1].InterfaceKind.LexemData(), YaccIdlDollar[2].Node.Identifier(), YaccIdlDollar[1].InterfaceKind, nil)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 200:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2307
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_header/interface_kind Identifier", YaccIdlDollar[1].InterfaceKind, YaccIdlDollar[2].Node)
			}
			var err error
			YaccIdlVAL.InterfaceHeader, err = newInterfaceHeader(YaccIdlDollar[1].InterfaceKind.LexemData(), YaccIdlDollar[2].Node.Identifier(), YaccIdlDollar[1].InterfaceKind, nil)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 201:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2321
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_header/interface_kind Identifier interface_inheritance_spec", YaccIdlDollar[1].InterfaceKind, YaccIdlDollar[2].Node, YaccIdlDollar[3].Node)
			}
			var err error
			YaccIdlVAL.InterfaceHeader, err = newInterfaceHeader(YaccIdlDollar[2].Node.LexemData(), YaccIdlDollar[2].Node.Identifier(), YaccIdlDollar[1].InterfaceKind, YaccIdlDollar[3].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}

		}
	case 202:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2336
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_kind/RWinterface", YaccIdlDollar[1].Node)
			}
			var err error
			YaccIdlVAL.InterfaceKind, err = newInterfaceKind(YaccIdlDollar[1].Node.LexemData(), false, false, false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 203:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2348
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_kind/RWlocal RWinterface", YaccIdlDollar[1].Node)
			}
			var err error
			YaccIdlVAL.InterfaceKind, err = newInterfaceKind(YaccIdlDollar[2].Node.LexemData(), true, false, false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 204:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2360
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_kind/RWabstract RWinterface", YaccIdlDollar[1].Node)
			}
			var err error
			YaccIdlVAL.InterfaceKind, err = newInterfaceKind(YaccIdlDollar[2].Node.LexemData(), false, true, false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 205:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2376
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_inheritance_spec/':' interface_namePlus")
			}
			YaccIdlVAL.Node = YaccIdlDollar[2].Node
		}
	case 206:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2385
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_namePlus/interface_name")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 207:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2392
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_namePlus/interface_namePlus ',' interface_name")
			}
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			_ = node.SetNextNode(YaccIdlDollar[3].Node)
		}
	case 208:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2404
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_name/scoped_name")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 209:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2413
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("interface_body/exportStar")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 210:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:2421
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("exportStar")
			}
			YaccIdlVAL.Node = nil
		}
	case 211:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2428
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 212:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2433
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("exportPlus/exportPlus export", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			}
			if YaccIdlDollar[1].Node != nil && YaccIdlDollar[2].Node != nil {
				node := YaccIdlDollar[1].Node
				for node.GetNextNode() != nil {
					node = node.GetNextNode()
				}
				_ = node.SetNextNode(YaccIdlDollar[2].Node)
			} else if YaccIdlDollar[1].Node == nil && YaccIdlDollar[2].Node != nil {
				YaccIdlVAL.Node = YaccIdlDollar[2].Node
			} else if YaccIdlDollar[1].Node != nil && YaccIdlDollar[2].Node == nil {
				YaccIdlVAL.Node = YaccIdlDollar[1].Node
			}
		}
	case 213:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2449
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("exportPlus/export", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 214:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2457
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/op_dcl ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 215:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2464
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/attr_dcl ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 216:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2471
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/type_dcl ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 217:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2478
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/const_dcl ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 218:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2485
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/except_dcl ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 219:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2492
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/type_id_dcl ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 220:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2499
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/type_prefix_dcl ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 221:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2506
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/import_dcl ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 222:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2513
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/op_oneway_dcl ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 223:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2520
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("export/op_with_context ';'", YaccIdlDollar[1].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 224:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:2530
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("op_dcl/op_type_spec Identifier '('  ')'", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			}
			var err error
			YaccIdlVAL.Node, err = newOperationDcl(YaccIdlDollar[2].Node, nil, YaccIdlDollar[1].Node, nil)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 225:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:2542
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("op_dcl/op_type_spec Identifier '('  ')'  raises_expr", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node, YaccIdlDollar[5].Node)
			}
			var err error
			YaccIdlVAL.Node, err = newOperationDcl(YaccIdlDollar[2].Node, nil, YaccIdlDollar[1].Node, YaccIdlDollar[5].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 226:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:2554
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("op_dcl/op_type_spec Identifier '('  parameter_dcls ')'", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node, YaccIdlDollar[4].Node)
			}
			var err error
			YaccIdlVAL.Node, err = newOperationDcl(YaccIdlDollar[2].Node, YaccIdlDollar[4].Node, YaccIdlDollar[1].Node, nil)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 227:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:2566
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("op_dcl/op_type_spec Identifier '('  parameter_dcls ')'  raises_expr", YaccIdlDollar[1].Node, YaccIdlDollar[2].Node, YaccIdlDollar[4].Node, YaccIdlDollar[6].Node)
			}
			var err error
			YaccIdlVAL.Node, err = newOperationDcl(YaccIdlDollar[2].Node, YaccIdlDollar[4].Node, YaccIdlDollar[1].Node, YaccIdlDollar[6].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 228:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2580
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 229:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2583
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("op_type_spec/RWvoid")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlVoidType); ok {
				YaccIdlVAL.Node = defaultTypes.VoidType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no void primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlVoidType interface")
				return 1
			}
		}
	case 230:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2601
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 231:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2606
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("param_dclPlus/param_dcl")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 232:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2613
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("param_dclPlus/param_dclPlus ',' param_dcl")
			}
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			_ = node.SetNextNode(YaccIdlDollar[3].Node)
		}
	case 233:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2625
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("param_dcl/param_attribute type_spec simple_declarator")
			}
			var err error
			YaccIdlVAL.Node, err = newOperationalParameter(YaccIdlDollar[3].Node.Identifier(), YaccIdlDollar[2].Node.LexemData(), YaccIdlDollar[1].ParamDirection, YaccIdlDollar[2].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 234:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2639
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("param_attribute/RWin")
			}
			YaccIdlVAL.ParamDirection = ParamDirectionIn
		}
	case 235:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2646
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("param_attribute/RWout")
			}
			YaccIdlVAL.ParamDirection = ParamDirectionOut
		}
	case 236:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2653
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("param_attribute/RWinout")
			}
			YaccIdlVAL.ParamDirection = ParamDirectionOut | ParamDirectionIn
		}
	case 237:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:2662
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("raises_expr/RWraises '(' scoped_namePlus ')'", YaccIdlDollar[3].Node)
			}
			YaccIdlVAL.Node = YaccIdlDollar[3].Node
		}
	case 238:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2671
		{
			//		if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
			//yaccLogger.Log("attr_dcl/readonly_attr_spec")
			//}
			//		$$ = $1
		}
	case 239:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2678
		{
			//		if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
			//yaccLogger.Log("attr_dcl/attr_spec")
			//}
			//		$$ = $1
		}
	case 240:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:2687
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("readonly_attr_spec/RWreadonly RWattribute type_spec readonly_attr_declarator")
			}
			var err error
			YaccIdlVAL.Node, err = newAttributeDcl(
				YaccIdlDollar[2].Node.LexemData(),
				YaccIdlDollar[4].AttrDeclarator.SimpleDeclarator().Identifier(),
				YaccIdlDollar[3].Node, YaccIdlDollar[4].AttrDeclarator, true)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 241:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2704
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("readonly_attr_declarator/simple_declarator raises_expr")
			}
			var err error
			YaccIdlVAL.AttrDeclarator, err = newReadonlyAttrDeclarator(YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 242:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2716
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("readonly_attr_declarator/simple_declaratorPlus")
			}
			var err error
			YaccIdlVAL.AttrDeclarator, err = newReadonlyAttrDeclarator(YaccIdlDollar[1].Node, nil)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 243:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2730
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("attr_spec/RWattribute type_spec attr_declarator")
			}
			var err error
			YaccIdlVAL.Node, err = newAttributeDcl(
				YaccIdlDollar[1].Node.LexemData(),
				YaccIdlDollar[3].AttrDeclarator.SimpleDeclarator().Identifier(),
				YaccIdlDollar[2].Node,
				YaccIdlDollar[3].AttrDeclarator,
				false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}

		}
	case 244:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2750
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("readonly_attr_declarator/simple_declarator raises_expr")
			}
			var err error
			YaccIdlVAL.AttrDeclarator, err = newReadonlyAttrDeclarator(YaccIdlDollar[1].Node, YaccIdlDollar[2].Node)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 245:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2762
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("readonly_attr_declarator/simple_declarator raises_expr")
			}
			var err error
			YaccIdlVAL.AttrDeclarator, err = newReadonlyAttrDeclarator(YaccIdlDollar[1].Node, nil)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 246:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2776
		{
			//
		}
	case 247:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2780
		{
			//
		}
	case 248:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2784
		{
			//
		}
	case 249:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2790
		{
			//
		}
	case 250:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2796
		{
			//
		}
	case 251:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2802
		{
			//
		}
	case 252:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2808
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_dcl/value_def")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 253:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2815
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_dcl/value_forward_dcl")
			}
			YaccIdlVAL.Node, _ = newValueDef(YaccIdlDollar[1].ValueHeader.LexemData(), YaccIdlDollar[1].ValueHeader.Identifier(), YaccIdlDollar[1].ValueHeader, nil, true)
		}
	case 254:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2822
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_dcl/value_box_def")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 255:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:2838
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_header '{' value_elementPlus '}'")
			}
			YaccIdlVAL.Node, _ = newValueDef(YaccIdlDollar[1].ValueHeader.LexemData(), YaccIdlDollar[1].ValueHeader.Identifier(), YaccIdlDollar[1].ValueHeader, YaccIdlDollar[3].Node, false)
		}
	case 256:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2847
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_header/value_kind Identifier value_inheritance_spec")
			}
			YaccIdlVAL.ValueHeader, _ = newValueHeader(YaccIdlDollar[1].InterfaceKind, YaccIdlDollar[2].Node, YaccIdlDollar[3].ValueInheritanceSpec)
		}
	case 257:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2854
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_header/value_kind Identifier")
			}
			YaccIdlVAL.ValueHeader, _ = newValueHeader(YaccIdlDollar[1].InterfaceKind, YaccIdlDollar[2].Node, nil)
		}
	case 258:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2863
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_kind/RWvaluetype")
			}
			var err error
			YaccIdlVAL.InterfaceKind, err = newInterfaceKind(YaccIdlDollar[1].Node.LexemData(), false, false, false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 259:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2875
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_kind/RWcustom RWvaluetype")
			}
			var err error
			YaccIdlVAL.InterfaceKind, err = newInterfaceKind(YaccIdlDollar[2].Node.LexemData(), false, false, true)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 260:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2887
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_kind/RWcustom RWvaluetype")
			}
			var err error
			YaccIdlVAL.InterfaceKind, err = newInterfaceKind(YaccIdlDollar[2].Node.LexemData(), false, true, false)
			if err != nil {
				YaccIdllex.Error(err.Error())
				return 1
			}
		}
	case 261:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:2901
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_inheritance_spec")
			}
			YaccIdlVAL.ValueInheritanceSpec, _ = newValueInheritanceSpec(nil, nil)
		}
	case 262:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2908
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_inheritance_spec/RWsupports interface_name")
			}
			YaccIdlVAL.ValueInheritanceSpec, _ = newValueInheritanceSpec(YaccIdlDollar[2].Node, nil)
		}
	case 263:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2915
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_inheritance_spec/':' value_name")
			}
			YaccIdlVAL.ValueInheritanceSpec, _ = newValueInheritanceSpec(nil, YaccIdlDollar[2].Node)
		}
	case 264:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:2922
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_inheritance_spec/':' value_name  RWsupports interface_name")
			}
			YaccIdlVAL.ValueInheritanceSpec, _ = newValueInheritanceSpec(YaccIdlDollar[4].Node, YaccIdlDollar[2].Node)
		}
	case 265:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2929
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_inheritance_spec/':' value_namePlus")
			}
			YaccIdlVAL.ValueInheritanceSpec, _ = newValueInheritanceSpec(nil, YaccIdlDollar[2].Node)
		}
	case 266:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:2936
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_inheritance_spec/':' value_namePlus RWsupports interface_namePlus")
			}
			YaccIdlVAL.ValueInheritanceSpec, _ = newValueInheritanceSpec(YaccIdlDollar[4].Node, YaccIdlDollar[2].Node)
		}
	case 267:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2943
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_inheritance_spec/':' RWtruncatable value_namePlus")
			}
			YaccIdlVAL.ValueInheritanceSpec, _ = newValueInheritanceSpec(nil, YaccIdlDollar[3].Node)
		}
	case 268:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:2950
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_inheritance_spec/':' RWtruncatable value_namePlus  RWsupports interface_namePlus")
			}
			YaccIdlVAL.ValueInheritanceSpec, _ = newValueInheritanceSpec(YaccIdlDollar[5].Node, YaccIdlDollar[3].Node)
		}
	case 269:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2960
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_namePlus/value_name")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 270:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:2967
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_namePlus/value_namePlus ',' value_name")
			}
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			_ = node.SetNextNode(YaccIdlDollar[3].Node)
		}
	case 271:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2979
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_name/scoped_name")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 272:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:2988
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_elementPlus/value_element")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 273:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:2995
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_elementPlus/value_elementPlus value_element")
			}
			node := YaccIdlDollar[1].Node
			for node.GetNextNode() != nil {
				node = node.GetNextNode()
			}
			_ = node.SetNextNode(YaccIdlDollar[2].Node)
		}
	case 274:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:3007
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_elementStar")
			}
			YaccIdlVAL.Node = nil
		}
	case 275:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3014
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_elementStar/value_elementPlus")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 276:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3023
		{

			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_element/export")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 277:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3031
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_element/state_member")
			}
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 278:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3038
		{

			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 279:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3045
		{

		}
	case 280:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3049
		{

		}
	case 281:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3055
		{

			YaccIdlVAL.Node = nil
		}
	case 282:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:3060
		{

			YaccIdlVAL.Node = nil
		}
	case 283:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:3065
		{

			YaccIdlVAL.Node = nil
		}
	case 284:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-7 : YaccIdlpt+1]
//line ./goyaccidl.y:3070
		{

			YaccIdlVAL.Node = nil
		}
	case 285:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3077
		{

			YaccIdlVAL.Node = nil
		}
	case 286:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3084
		{

			YaccIdlVAL.Node = nil
		}
	case 287:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3089
		{

			YaccIdlVAL.Node = nil
		}
	case 288:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3095
		{

			YaccIdlVAL.Node = nil
		}
	case 289:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3102
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_forward_dcl/value_kind Identifier")
			}
			YaccIdlVAL.ValueHeader, _ = newValueHeader(YaccIdlDollar[1].InterfaceKind, YaccIdlDollar[2].Node, nil)

		}
	case 290:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3110
		{
		}
	case 291:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3114
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("type_prefix_dcl:/RWtypeprefix scoped_name String_literal")
			}
			YaccIdlVAL.Node = NewTypePrefix(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[2].Node.Identifier(), YaccIdlDollar[3].Node.Identifier())
		}
	case 292:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3123
		{
			YaccIdlVAL.Node = newImportDcl(YaccIdlDollar[1].Node.LexemData(), YaccIdlDollar[2].Node)
		}
	case 293:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3129
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 294:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3132
		{
			YaccIdlVAL.Node = YaccIdlDollar[1].Node
		}
	case 295:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3138
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("object_type/RWObject")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlObjectType); ok {
				YaccIdlVAL.Node = defaultTypes.ObjectType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no object primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlObjectType interface")
				return 1
			}
		}
	case 296:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:3154
		{
		}
	case 297:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:3157
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 298:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3164
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 299:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3171
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 300:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3179
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 301:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3188
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 302:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3195
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 303:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3203
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 304:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3212
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 305:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3219
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 306:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3228
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 307:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3235
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 308:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3243
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 309:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3252
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 310:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3261
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("value_base_type/RWValueBase")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlValueBaseType); ok {
				YaccIdlVAL.Node = defaultTypes.ValueBaseType()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no valuebase primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlValueBaseType interface")
				return 1
			}
		}
	case 311:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3279
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 312:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3286
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 313:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3295
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 314:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3304
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 315:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3314
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 316:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3321
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 317:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3328
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 318:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3335
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 319:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3345
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 320:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3354
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 321:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:3362
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 322:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3369
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 323:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3376
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 324:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3384
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 325:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3391
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 326:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3398
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 327:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3405
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 328:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3412
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 329:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3419
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 330:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3426
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 331:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3436
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 332:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3445
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 333:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3452
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 334:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3462
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 335:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3469
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 336:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3479
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 337:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3488
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 338:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3495
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 339:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3502
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 340:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3509
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 341:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3516
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 342:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:3523
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 343:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3530
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 344:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:3537
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 345:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:3544
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 346:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-7 : YaccIdlpt+1]
//line ./goyaccidl.y:3551
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 347:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3562
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 348:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3571
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 349:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:3579
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 350:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3586
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 351:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3593
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 352:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3601
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 353:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3608
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 354:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3615
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 355:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3625
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 356:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3632
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 357:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3639
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 358:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:3646
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 359:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3656
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 360:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3665
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 361:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3672
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 362:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3680
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 363:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3689
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 364:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3698
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 365:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3707
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 366:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3716
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 367:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3725
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 368:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3734
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 369:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3741
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 370:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3748
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 371:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:3755
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 372:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:3763
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 373:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3770
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 374:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3777
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 375:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3784
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 376:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3793
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 377:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3800
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 378:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:3809
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 379:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-7 : YaccIdlpt+1]
//line ./goyaccidl.y:3816
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 380:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3825
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 381:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3834
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 382:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3841
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 383:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3848
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 384:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3855
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 385:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3864
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 386:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3871
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 387:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3880
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 388:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:3889
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 389:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3896
		{
		}
	case 390:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3900
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 391:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3907
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 392:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3914
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 393:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:3922
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 394:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3930
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 395:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3937
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 396:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3946
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 397:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3953
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 398:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:3962
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 399:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3971
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 400:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:3978
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 401:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:3987
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 402:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:3994
		{
		}
	case 403:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:3997
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 404:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:4004
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 405:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-8 : YaccIdlpt+1]
//line ./goyaccidl.y:4013
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 406:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4022
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 407:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4031
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 408:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:4038
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 409:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:4046
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 410:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4055
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 411:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4062
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 412:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4069
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 413:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4076
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 414:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4083
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 415:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4090
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 416:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4097
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 417:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4104
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 418:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4111
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 419:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:4118
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 420:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4125
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 421:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:4133
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 422:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4141
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 423:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:4148
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 424:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:4157
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 425:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4167
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 426:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4177
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 427:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:4184
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 428:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4192
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 429:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4199
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 430:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:4206
		{
		}
	case 431:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4208
		{
		}
	case 432:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:4208
		{
		}
	case 433:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4209
		{
		}
	case 434:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-8 : YaccIdlpt+1]
//line ./goyaccidl.y:4213
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 435:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:4220
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 436:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:4229
		{
			YaccIdllex.Error("implement bitset_dcl1")
			return 1
		}
	case 437:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-13 : YaccIdlpt+1]
//line ./goyaccidl.y:4234
		{
			YaccIdllex.Error("implement bitset_dcl2")
			return 1
		}
	case 438:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:4240
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 439:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:4248
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 440:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:4256
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 441:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:4265
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 442:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-6 : YaccIdlpt+1]
//line ./goyaccidl.y:4272
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 443:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4281
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 444:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4288
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 445:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4295
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 446:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:4304
		{
			YaccIdllex.Error("implement bitmask_dcl")
			return 1
		}
	case 447:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:4310
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 448:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4318
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 449:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4328
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("signed_tiny_int/RWint8")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlInt8Type); ok {
				YaccIdlVAL.Node = defaultTypes.Int8Type()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no int8 primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlInt8Type interface")
				return 1
			}
		}
	case 450:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4346
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("unsigned_tiny_int/RWuint8")
			}
			if defaultTypes, ok := YaccIdllex.(IIdlUInt8Type); ok {
				YaccIdlVAL.Node = defaultTypes.UInt8Type()
				if YaccIdlVAL.Node == nil {
					YaccIdllex.Error("no uint8 primitive")
					return 1
				}
			} else {
				YaccIdllex.Error("no IIdlUInt8Type interface")
				return 1
			}
		}
	case 451:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-4 : YaccIdlpt+1]
//line ./goyaccidl.y:4366
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 452:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:4375
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 453:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4384
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 454:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:4391
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 455:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:4398
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 456:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:4405
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 457:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-0 : YaccIdlpt+1]
//line ./goyaccidl.y:4413
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 458:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4421
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 459:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:4430
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 460:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:4437
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 461:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4446
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 462:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4453
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 463:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4460
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 464:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4469
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 465:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-2 : YaccIdlpt+1]
//line ./goyaccidl.y:4478
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 466:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-5 : YaccIdlpt+1]
//line ./goyaccidl.y:4485
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 467:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4494
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 468:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4501
		{
			if yaccLogger, ok := YaccIdllex.(IYaccLogger); ok {
				yaccLogger.Log("")
			}
			YaccIdlVAL.Node = nil
		}
	case 469:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-1 : YaccIdlpt+1]
//line ./goyaccidl.y:4509
		{
		}
	case 470:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:4510
		{
		}
	case 471:
		YaccIdlDollar = YaccIdlS[YaccIdlpt-3 : YaccIdlpt+1]
//line ./goyaccidl.y:4511
		{
		}
	}
	goto YaccIdlstack /* stack new state and value */
}
